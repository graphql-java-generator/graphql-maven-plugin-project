<project name="DeploySite" default="deploy" basedir=".">
	<description>
		Deploy the site. The site must have been previously been staged in the target/stage folder. The site is
		checked out from the gh-pages branch of the github repository, then synchronized with the target/stage folder, then
		commited back to github.
	</description>
	<!-- set global properties for this build -->
	<property name="sourceFolder" location="target/staging" />
	<property name="targetFolder" location="target/gh-pages_branch" />
	<property name="targetProjectFolder" location="target/gh-pages_branch/graphql-maven-plugin-project" />

	<target name="deploy">

		<!-- This is an ant implementation largely inspired from this page (thanks a lot to you, guys!): -->
		<!-- http://wiki.bitplan.com/index.php/Multi-Module_Maven_with_github_pages -->
		
		<input message="Enter the last released version (e.g.: 1.6.0):" addproperty="version" />

		<!-- For git on Windows, there is an issue with (too) long filenames. The git command below takes care of that  -->
		<exec executable="git" failonerror="true">
			<arg value="config" />
			<arg value="--system" />
			<arg value="core.longpaths" />
			<arg value="true" />
		</exec>

		<!-- To be sure everything is ready for the site, we first build the project -->
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn" />
			<arg value="install" />
			<arg value="site:attach-descriptor" />
			<arg value="site:site" />
			<arg value="site:stage" />
			<arg value="-DskipTests" />
		</exec>

		<input message="Check the staged site (type any key if ok, or type CTRL+C to abort)" addproperty="checked" />

		<!-- Checks that the site has been staged -->
		<available file="${sourceFolder}" type="dir" property="siteHasBeenStaged" value="true" />
		<fail unless="siteHasBeenStaged" message="The site has not been staged. Please run first: mvn site:stage" />

		<!-- Cleaning the check out folder -->
		<delete dir="${targetFolder}" />
		<mkdir dir="${targetFolder}" />

		<!-- Checkout the gh-pages branch,to commit the site onto it -->
		<!-- git clone https://github.com/graphql-java-generator/graphql-maven-plugin-project - -branch gh-pages - -single-branch -->
		<exec executable="git" dir="${targetFolder}" failonerror="true">
			<arg value="clone" />
			<arg value="https://github.com/graphql-java-generator/graphql-maven-plugin-project" />
			<arg value="--branch" />
			<arg value="gh-pages" />
			<arg value="--single-branch" />
		</exec>

		<!-- Synchronize the target gh-pages folder, with the staged site -->
		<sync todir="${targetProjectFolder}" overwrite="true">
			<fileset dir="${sourceFolder}" />
			<preserveintarget>
				<include name="/.git/**" />
				<include name="**/CNAME" />
			</preserveintarget>
		</sync>

		<!-- git add * -->
		<exec executable="git" dir="${targetProjectFolder}" failonerror="true">
			<arg value="add" />
			<arg value="*" />
		</exec>


		<!-- git commit -m "checking new site in" -->
		<exec executable="git" dir="${targetProjectFolder}" failonerror="true">
			<arg value="commit" />
			<arg value="-m" />
			<arg value="Checking new site in" />
			<arg value="--author=EtienneSF &lt;etienne_sf@users.sf.net>" />
		</exec>


		<!-- git push -->
		<echo message="The site is ready to be pushed. Do these commands:" level="info" />
		<echo message="cd ${targetProjectFolder}" level="info" />
		<echo message="git push" level="info" />
		<!-- exec executable="git" dir="${targetProjectFolder}" failonerror="true"> <arg value="push" /> </exec -->
	</target>

</project>