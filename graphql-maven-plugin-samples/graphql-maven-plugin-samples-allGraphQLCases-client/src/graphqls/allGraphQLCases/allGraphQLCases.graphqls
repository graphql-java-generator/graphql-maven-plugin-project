
scalar MyCustomScalarForADate 
	@testDirective(value:"on Scalar") 
	@specifiedBy(url: "url for the ISO-8601 data format")
	@anotherTestDirective 

""" The MyCustomScalarForADateTime uses the ExtendedScalars#MyCustomScalarForADateTime implementation, provided by graphql-java (in the graphql-java-extended-scalars) """
scalar MyCustomScalarForADateTime
@testDirective(value:"directive on a custom scalar")

scalar Long

scalar MyBoolean

""" A scalar to test the issue #174 """
scalar Base64String

""" A scalar to test the issues #154 and #198 """
scalar CustomId

""" A scalar that encapsulates JSON (see issue #205) """
scalar Object
scalar JSON

directive @IDScalarDirective
on SCALAR

# No description is allowed here (only a comment)
extend scalar ID @IDScalarDirective

directive @RelayConnection
on FIELD_DEFINITION

directive @generateDataLoaderForLists
on FIELD_DEFINITION

directive @testExtendKeyword(msg: String)
on 
# ExecutableDirectiveLocation
	QUERY | MUTATION | SUBSCRIPTION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | VARIABLE_DEFINITION |
# TypeSystemDirectiveLocation
	SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

# A repeatable directive (available since october 2021)
directive @aRepeatableDirective(str: String!) repeatable on OBJECT | INTERFACE

schema @testDirective(value:"on Schema") {
	""" A description on the query """
    query: MyQueryType
    mutation: AnotherMutationType
    # The subscription is defined in the 'extend schema', here below
}

"""
This is a description to describe the type MyQueryType
on two lines
"""
type MyQueryType {
	"""
	This is a description to describe the field withoutParameters
	on two lines
	"""
	withoutParameters: [Character]!
    withOneOptionalParam(character: CharacterInput @testDirective(value:"test for issue 162")): Character @testDirective(value:"on withOneOptionalParam", anotherValue:"something else")
    withOneMandatoryParam(character: CharacterInput!): Character
    withOneMandatoryParamDefaultValue(intParam: Int! = 13): Int!
    withTwoMandatoryParamDefaultVal(theHero: DroidInput! = {name: "droid's name", appearsIn:[JEDI,NEWHOPE]}, num: Int = 45): Droid!
    withEnum(episode: Episode! = NEWHOPE): Character
    withListOfList(matrix: [[Float]]!): AllFieldCases
    
    """
    ################################################################################
    # withList return a list of Characters, matching the given list of CharacterInput.
    # The name of the first Character returned is replaced by the given firstName.
    # All ids are generated
    """  
    withList(firstName: String!, characters: [CharacterInput!]!): [Character]

    """
    ################################################################################
   	# Complementary tests with the AllFieldCases Object
   	"""
	allFieldCases(input: AllFieldCasesInput): AllFieldCases  
	  
    """
    ################################################################################
   	# Test for unions
   	"""
	unionTest(human1: HumanInput, human2: HumanInput, droid1: DroidInput, droid2: DroidInput): [AnyCharacter!]!    
        
    """
    ################################################################################
    # error always returns an error!  (used to check the error management)
    """
    error(errorLabel: String!): Character
    
    """ Check for GraphQL identifier that are java keywords """
    aBreak: break
    
    ################################################################################
    # queries to check directive behavior
    
    """
    # Returns the value, and potentially the anotherValue of the @testDirective directive set on the directiveOnQuery query. 
    # List is null if the directive is not present.
    """
    directiveOnQuery(uppercase: Boolean): [String]!

    """
    # Returns the value, and potentially the anotherValue of the @testDirective directive set on the @directiveOnQuery. 
    # List is null if the directive is not present.
    """
    directiveOnField: Character!

    ################################################################################
    # test for various queries that return enum, list of enum, list of nullable enums...
    returnEnum: EnumWithReservedJavaKeywordAsValues
    returnMandatoryEnum: EnumWithReservedJavaKeywordAsValues!
    returnListOfEnums: [EnumWithReservedJavaKeywordAsValues]
    returnListOfListOfEnums: [[EnumWithReservedJavaKeywordAsValues]]
    returnListOfMandatoryEnums: [EnumWithReservedJavaKeywordAsValues!]
    returnMandatoryListOfEnums: [EnumWithReservedJavaKeywordAsValues]!
    returnMandatoryListOfMandatoryEnums: [EnumWithReservedJavaKeywordAsValues!]!
    
    ################################################################################
    # queries to check the addRelayConnections capability
    connectionWithoutParameters: [Character] @RelayConnection
    connectionOnHuman(planet: String, episode: Episode): [Human] @RelayConnection
    
    ################################################################################
    # queries created to test some issues
    
    checkOverriddenController: String!
    
    """
    #issue53 is about custom scalars as parameter for a query/mutation/subscription, 
    that was not properly serialized/deserialized
    """
    issue53(date: MyCustomScalarForADate!): MyCustomScalarForADate!
    issue200(param: MyBoolean): MyBoolean
    
    """
    #issue82 is about hard coded values as parameters. Other types are tests with other queries, 
    but there was no method with a simple float parameter
    """
    issue82Float(aFloat: Float!): Float!
    issue82ID(aID: ID!): ID!
    
    """ Issue 217: issue when a field name starts with an uppercase letter """
    Issue217(AnArg: String!): String!

	""" test for issue #128 (compilation error when a Query returns a type 'Client') """
	issue128: Client
	
	""" test for issue #139 (use of java reserved keyword) """
	enumWithReservedJavaKeywordAsValues: EnumWithReservedJavaKeywordAsValues
	listOfEnumWithReservedJavaKeywordAsValues(
		param1: EnumWithReservedJavaKeywordAsValues=abstract,
		param2: [EnumWithReservedJavaKeywordAsValues]=[assert,boolean]
		): [EnumWithReservedJavaKeywordAsValues]
	reservedJavaKeywordAllFieldCases: ReservedJavaKeywordAllFieldCases
    if: String
    """ Test for PR 177 (on server side, the returned value is the content of the if input parameter) """
    implements(if: String!): String
    import: String
    instanceof: String
    int: String
    interface: String
    long: String
    native: String
    new: String
    "Issue #188: null is not identified as a java keyword"
    null: String
    package: String
    private: String
    protected: String
    public: String
    return: String
    short: String
    static: String
    strictfp: String
    super: String
    switch: String
    synchronized: String
    this: String
    throw: String
    throws: String
    transient: String
    try: String
    void: String
    volatile: String
    while: String
	
	""" test for issue #140 (error for type that implements multiple interfaces) """
    foo140: Foo140
    
    """ Test for issue #174: a custom scalar which Java type is an array """
	testBase64String(input: Base64String!): Base64String    

    
    """ Test of JSON scalar, for issue #205 """
    json(json: JSON): JSON
    jsons(jsons: [JSON]): [JSON]
    jsonWithInput(input: InputWithJson!): TypeWithJson!
    jsonsWithInput(input: [InputWithJson!]!): [TypeWithJson!]!
    object(object: Object): Object
    objects(objects: [Object]): [Object]
    objectWithInput(input: InputWithObject!): TypeWithObject!
    objectsWithInput(input: [InputWithObject!]!): [TypeWithObject!]!


## End of MyQueryType
}

" A mono line description for AnotherMutationType " 
type AnotherMutationType {
	createHuman(human: HumanInput!): Human!
	createAllFieldCases(input: AllFieldCasesInput!): AllFieldCases!
	
	" Tests for issue 51 "
	deleteSnacks(id: [ID]) : Boolean

	""" test for issue #139 (use of java reserved keyword) """
    if: String
    implements: String
}

"A mono line description for TheSubscriptionType" 
type TheSubscriptionType {
	
	""" Will be notified for each Human added to this Episode """
	subscribeNewHumanForEpisode(episode: Episode!): Human!
	
	""" Issue 54 """
	subscribeToAList: [Int]!
	subscribeToAListOfScalars: [MyCustomScalarForADate]

    """ issue53 is about custom scalars as parameter for a query/mutation/subscription, that was not properly serialized/deserialized """
    issue53(date: MyCustomScalarForADate!): MyCustomScalarForADate!
    
    """ Some subscriptions to test all kind of input parameters (to check proper serialization and deserialization) """
    allGraphQLCasesInput(input: AllFieldCasesInput!): AllFieldCases!
    allGraphQLCasesParam(id: String!, name: String!, age: Long!, integer: Int!, date: MyCustomScalarForADate!, dates: [MyCustomScalarForADate]!, matrix: [[Float]]!, oneWithoutIdSubtype: AllFieldCasesWithoutIdSubtypeInput!, listWithoutIdSubtype: [AllFieldCasesWithoutIdSubtypeInput!]!): AllFieldCases!
    
    """
    A dummy subscription, that allows to test errors (and other strange behavior), and their return to the subscription's client
    """
    subscriptionTest(param: SubscriptionTestParam!): String!
    
    ################################################################################
    # test for various queries that return enum, list of enum, list of nullable enums...
    returnEnum: EnumWithReservedJavaKeywordAsValues
    returnMandatoryEnum(enum: EnumWithReservedJavaKeywordAsValues): EnumWithReservedJavaKeywordAsValues!
    returnListOfEnums: [EnumWithReservedJavaKeywordAsValues]
    returnListOfMandatoryEnums: [EnumWithReservedJavaKeywordAsValues!]
    returnListOfListOfEnums: [[EnumWithReservedJavaKeywordAsValues]]
    returnMandatoryListOfEnums: [EnumWithReservedJavaKeywordAsValues]!
    returnMandatoryListOfMandatoryEnums: [EnumWithReservedJavaKeywordAsValues!]!

    """ Issue 122: Check Subscription behavior when notification response is null """
    subscriptionWithNullResponse: String

	""" test for issue #139 (use of java reserved keyword) """
	enumWithReservedJavaKeywordAsValues: EnumWithReservedJavaKeywordAsValues
	listOfEnumWithReservedJavaKeywordAsValues: [EnumWithReservedJavaKeywordAsValues]
    if: String
    implements: String

    "Issue #188: null is not identified as a java keyword"
    null: String
    
    """ Test of JSON scalar, for issue #205 """
    json(json: JSON): JSON
    jsons(jsons: [JSON]): [JSON]
    jsonsWithInput(input: [InputWithJson!]!): [TypeWithJson!]!
    objectsWithInput(input: [InputWithObject!]!): [TypeWithObject!]!
}

interface WithID @testDirective(value:"on Interface", anotherValue: "666") {
   id: ID!
}

interface Commented {
	nbComments: Int
    comments: [String]
}

interface UnusedInterface {
	aNonUSedField: String
}

##############################################################################################################
################  ALL GRAPHQL CASES TEST CASES ###############################################################
##############################################################################################################


input AllFieldCasesInput @testDirective(value:"on Input Type") {
    id: ID! @testDirective(value:"on Input Field")
    name: String!
    forname: String
    break: String
    age: Long!
    date: MyCustomScalarForADate
    dateTime: MyCustomScalarForADateTime
    dates: [MyCustomScalarForADate]!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    matrix: [[Float]]!
    withIdSubtype: [AllFieldCasesWithIdSubtypeInput!]
    withoutIdSubtype: [AllFieldCasesWithoutIdSubtypeInput!]
    "Issue #188: null is not identified as a java keyword"
    null: String
}

input AllFieldCasesWithIdSubtypeInput {
    id: ID!
    name: String!
}

input FieldParameterInput {
	uppercase: Boolean
	date: MyCustomScalarForADate
}

input AllFieldCasesWithoutIdSubtypeInput {
    name: String!
}

enum Unit {
    YEAR
    MONTH
    DAY
}


"""
This type is a clone of the InterfaceAllFieldCases interface. 
Both should contains all possible combinations of parameters, data type, list, mandatory field or items...
"""
type AllFieldCases implements WithID 
		@testDirective(value:"on Object\n With a line feed\\\n\r and a carriage return.\n It also contains 'strange' characters, to check the plugin behavior: \\'\"}])({[\\") 
		@anotherTestDirective 
		@aRepeatableDirective(str:"repetition 1")
		@aRepeatableDirective(str:"repetition 2")
{
    id: ID! @testDirective(value:"on Field")
    name: String!
    forname(uppercase: Boolean @testDirective(value:"on Argument"), textToAppendToTheForname: String): String
    break(if: String!): String
    age(unit: Unit = YEAR) : Long!   @deprecated(reason: "This is a test")
    aFloat: Float
    date: MyCustomScalarForADate
    dateTime: MyCustomScalarForADateTime
    dates: [MyCustomScalarForADate]!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!]
    matrix: [[Float]]!
    oneWithoutFieldParameter: AllFieldCasesWithIdSubtype
    oneWithIdSubType(uppercase: Boolean @testDirective(value:"on uppercase parameter")): AllFieldCasesWithIdSubtype
    listWithIdSubTypes(nbItems: Long!, date: MyCustomScalarForADate, dates: [MyCustomScalarForADate]!, uppercaseName: Boolean, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
       @generateDataLoaderForLists
    oneWithoutIdSubType(input: FieldParameterInput): AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(nbItems: Long!, input: FieldParameterInput, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
    issue65(inputs: [FieldParameterInput!]): [AllFieldCasesWithoutIdSubtype]
    issue66(input: [AllFieldCasesInput] = 
    	[
    		{
    			id: "11111111-1111-1111-1111-111111111111",
    			name: "A name",
    			age: 1234567890,
				dates: [],
    			nbComments: 123,
    			comments: ["s1", "s2"],
    			booleans: [true, false],
    			aliases: [],
    			planets: ["s5"],
    			matrix: [[1.1, 1.2], [1.3, 1.4], []],
    			withIdSubtype: [{id: "33333333-3333-3333-3333-333333333333", name: "name3"}, {id: "44444444-4444-4444-4444-444444444444", name: "name4"}],
    			withoutIdSubtype: [{name: "name5"}]
    		},
    		{    
    			id: "22222222-2222-2222-2222-222222222222",
    			name: "name2",
    			age: 1,
				dates: [],
    			aliases: [],
    			planets: ["a planet"],
    			matrix: [[]],
    			withIdSubtype: [{id: "66666666-6666-6666-6666-666666666666", name: "name6"}, {id: "77777777-7777-7777-7777-777777777777", name: "name7"}],
    			withoutIdSubtype: [{name: "name8"}]
    		}
    	]): AllFieldCases!
}

"""
This interface is a clone of the AllFieldCases type. 
Both should contains all possible combinations of parameters, data type, list, mandatory field or items...
"""
interface AllFieldCasesInterface @testDirective(value:"on Interface") {
    id: ID!
    name: String! @testDirective(value:"on interface field (name)")
    forname(uppercase: Boolean, textToAppendToTheForname: String): String
    age: Long!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!] @RelayConnection
    oneWithIdSubType: AllFieldCasesWithIdSubtype
    listWithIdSubTypes(nbItems: Int!, uppercaseName: Boolean, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
    oneWithoutIdSubType(input: FieldParameterInput): AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(nbItems: Int!, input: FieldParameterInput, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
}

""" A concrete class that just implements the above interface """
type AllFieldCasesInterfaceType implements AllFieldCasesInterface & WithID {
    id: ID!
    name: String!
    forname(uppercase: Boolean, textToAppendToTheForname: String): String
    age: Long!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    # @RelayConnection should be but is not applied on the friends field (this allows the unit test that checks that a warning is correctly generated)
    friends: [Human!] 
    oneWithIdSubType: AllFieldCasesWithIdSubtype
    listWithIdSubTypes(nbItems: Int!, uppercaseName: Boolean, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
    oneWithoutIdSubType(input: FieldParameterInput): AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(nbItems: Int!, input: FieldParameterInput, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
}

type AllFieldCasesWithIdSubtype {
    id: ID!
    name: String!
}

type AllFieldCasesWithoutIdSubtype {
    name: String!
}

input SubscriptionTestParam {
	errorOnSubscription: Boolean!
	errorOnNext: Boolean!
	completeAfterFirstNotification: Boolean!
	closeWebSocketBeforeFirstNotification: Boolean!
	messages: [String!]
}

"""
A test type, to test the @batchMapping spring-graphql annotation
"""
type BatchMappingType {
	id: ID!
	name: String!
	friends: [Character]
}

##############################################################################################################
################  STAR WARS SCHEMA  ##########################################################################
##############################################################################################################

enum Episode
	@testDirective(
		value: "on Enum", 
		anotherValue: "69", 
		anInt: 666, 
		aFloat: 666.666, 
		aBoolean: true, 
		anID: "00000000-0000-0000-0000-000000000002", 
		anEnum: NEWHOPE, 
		aCustomScalarDate: "2001-02-28"
		anArray: ["str1", "str2"]
		anObject: {name: "specific name", appearsIn: [NEWHOPE, EMPIRE], type: "Human"}  
	) 
{
    NEWHOPE
    EMPIRE 
    	@anotherTestDirective 
    JEDI
    DOES_NOT_EXIST  
    	@testDirective(value:"on Enum values", anotherValue: "-1") @anotherTestDirective
}

interface Character @testDirective(value:"on Character interface") @anotherTestDirective {
    id: ID!
    name(uppercase: Boolean @testDirective(value:"on interface field's parameter")): String! @testDirective(value:"on interface field") @anotherTestDirective
    friends: [Character]
    appearsIn: [Episode]! @anotherTestDirective
}

union AnyCharacter @testDirective(value:"on Union")
= Human | Droid 



type Human implements Character & Commented &  WithID {
    id: ID!
    name(uppercase: Boolean @testDirective(value:"on interface field's parameter")): String!
    bestFriend: Character
    friends: [Character]
	nbComments: Int
    comments: [String]
    appearsIn: [Episode]!
    homePlanet: String
}

type Droid implements Character & WithID {
    id: ID!
    name(uppercase: Boolean  @testDirective(value:"on interface field's parameter")): String!
    friends: [Character]
    appearsIn: [Episode]!
    primaryFunction: String
}

input DroidInput {
    name: String!
    friends: [CharacterInput]
    appearsIn: [Episode]!
    primaryFunction: String
}

##############################################################################################################
#############  SOME DIRECTIVES, DEFINED AT THE END TO BE SURE THAT THE ORDER DOESN'T MATTER ##################
##############################################################################################################


""" A test directive, that can be added anywhere """
directive @testDirective(
  value: String! = "A value to test default values"
  anotherValue: String = null
  anArray: [String!] = ["str1", "str2"]
  anObject: CharacterInput = {name: "default name", appearsIn: [JEDI, NEWHOPE], type: "Human"}  
  anInt: Int
  aFloat: Float
  aBoolean: Boolean
  anID: ID
  anEnum: Episode = JEDI
  aCustomScalarDate: MyCustomScalarForADate = "2000-12-31"
) on
# ExecutableDirectiveLocation
	QUERY | MUTATION | SUBSCRIPTION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT |
# TypeSystemDirectiveLocation
	SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

""" Another test directive, to check that two directives can be added """
directive @anotherTestDirective
on
# ExecutableDirectiveLocation
	QUERY | MUTATION | SUBSCRIPTION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT |
# TypeSystemDirectiveLocation
	SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION


##############################################################################################################
############  SOME INPUT TYPES, DEFINED AT THE END TO BE SURE THAT THE ORDER DOESN'T MATTER ##################
##############################################################################################################

input CharacterInput {
    name: String!
    friends: [CharacterInput]
    appearsIn: [Episode]!
    # type should be one of Human or Droid
    type: String!
} 
input HumanInput {
    name: String!
    bestFriend: CharacterInput
    friends: [CharacterInput]
	nbComments: Int
    comments: [String]
    appearsIn: [Episode]!
    homePlanet: String
}

##############################################################################################################
##################  TEST ON COLLISION WITH JAVA KEYWORDS  ####################################################
##############################################################################################################

scalar else

enum extends {
	INT
	DOUBLE
	FLOAT
	LONG
}

input class {
	default: String
}

type break {
	case(test: extends!, if: else): extends
}

##############################################################################################################
###############   TEST CASE FOR ISSUES #######################################################################
##############################################################################################################

#############################
# test for issue #35
#
# But removed from this GraphQL schema as enum values in Directives are not supported by graphql-java v14.0 on server side
# It works Ok on client side
#
#directive @relation(
#    name: String
#    direction: direction
#) on FIELD_DEFINITION
#
#enum direction {
#    IN
#    OUT
#}
#############################

#############################
# test for issue #36

type TestExtScalar {
bad: NonNegativeInt
}

scalar NonNegativeInt


#############################
# test for issue #114

interface IBar1 {
    id: ID
}

interface IBar2 implements IBar1 {
    id: ID
}

interface IBar3 implements IBar1 & IBar2 {
    id: ID
}

interface IFoo1 {
    id: ID
    bar: IBar1
}

interface IFoo2 {
    id: ID
    bar: IBar2
}

type TBar1 implements IBar1 {
    id: ID
}

interface IBar12 implements IBar1 & IBar2 {
    id: ID
}

type TBar12 implements IBar12 & IBar1 & IBar2 {
    id: ID
}

type TBar2 implements IBar2 & IBar1 {
    id: ID
}

""" TFoo1 is the basic test case, for issue #114 """
type TFoo1 implements IFoo1 {
    id: ID
    
    """
    The 'bar' field is a valid GraphQL field. 
    But before correction of the issue #114, the generated Java code would not compile, as the TBar is a concrete class that implements IBar
    (and not IBar itself as declared in IFoo)
    """
    bar: TBar1 
}

""" TFoo12 is a more complex one, with more than one interface implemented """
type TFoo12 implements IFoo1 & IFoo2 {
    id: ID
    """
     The 'bar' field is a valid GraphQL field. 
     But before correction of the issue #114, the generated Java code would not compile, as the TBar is a concrete class that implements IBar
     (and not IBar itself as declared in IFoo)
    """
    bar: TBar12
}

interface IFoo3 implements IFoo1 & IFoo2 {
	id: ID
	bar: IBar12
}

type TFoo3 implements IFoo3 & IFoo1 & IFoo2 {
	id: ID
	bar: TBar12
}


interface IList {
	list: [IFoo1]
}

type TList implements IList {
	list: [TFoo1]
}

#############################
# test for issue #140


interface IBar140 {
    name: String
}

interface I2Bar140 implements IBar140 {
    name: String
}

type Bar140 implements I2Bar140 & IBar140 {
    name: String
}

interface IFoo140 {
    bar: IBar140
}

interface I2Foo140 implements IFoo140 {
    bar: I2Bar140
}

type Foo140 implements I2Foo140 & IFoo140 {
    bar: Bar140
}
#############################
# test for issue #128

interface Client {
	foo: String
}

#############################
# test for issue #130
type Field {
	# Generates a clash between the java classname, and the enum that contains the list of of fields.
    someValue : String
}
type Builder {
	# Generates a clash between the java classname, and the Builder class generated in each POJO
	someValue: String
}

#############################
# test for issue #130: test for all possible 'extend' use

interface interfaceToTestExtendKeyword {
	extendedField: String
}

type Pet {
	id: ID!
	name: String!
}

extend enum Unit @testExtendKeyword {
	HOUR MINUTE SECOND
}

extend enum Episode @testExtendKeyword(msg:"an Episode extension") {
	A_NEW_EPISODE
}

extend input AllFieldCasesInput @testExtendKeyword {
	extendedField: String
}

extend interface AllFieldCasesInterface
# Interface extension may not add implemented interface to an existing interface (as of juin 2018 GraphQL specs)
# implements interfaceToTestExtendKeyword 
@testExtendKeyword {
	extendedField: String
}
# As we added a field in this interface, we need to add this field into every type that implements it
extend type AllFieldCasesInterfaceType {
	extendedField: String
}

extend scalar Long @testExtendKeyword

extend schema @testExtendKeyword {
    subscription: TheSubscriptionType 
}

extend type AllFieldCases implements interfaceToTestExtendKeyword @testExtendKeyword(msg: "comes from type extension") {
	extendedField: String
}

extend union AnyCharacter @testExtendKeyword
= Pet

#############################
# test for issue #139:


enum EnumWithReservedJavaKeywordAsValues {
	abstract, assert, boolean, break, byte, case, catch, char, class, const, continue, default, do, double, else, enum, extends, final, 
	finally, float, for, goto, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, 
	return, short, static, strictfp, super, switch, synchronized, this, throw, throws, transient, try, void, volatile, while
}

type ReservedJavaKeywordAsScalar {
    if: String
    implements: String
    import: String
    instanceof: String
    int: String
    interface: String
    long: String
    native: String
    new: String
    package: String
    private: String
    protected: String
    public: String
    return: String
    short: String
    static: String
    strictfp: String
    super: String
    switch: String
    synchronized: String
    this: String
    throw: String
    throws: String
    transient: String
    try: String
    void: String
    volatile: String
    while: String
}

type ReservedJavaKeywordAsObjectField {
	# Parameters should also be protected
    if(new: String, package: String, private: String): Human
    implements: Human
    import: Human
    instanceof: Human
    int: Human
    interface: Human
    long: Human
    native: Human
    new: Human
    package: Human
    private: Human
    protected: Human
    public: Human
    return: Human
    short: Human
    static: Human
    strictfp: Human
    super: Human
    switch: Human
    synchronized: Human
    this: Human
    throw: Human
    throws: Human
    transient: Human
    try: Human
    void: Human
    volatile: Human
    while: Human
}

"""
#############################
test for issue #166:
This class contains fields that are Java reserved words. A query allows to check that mapping properly occurs on both client and server side.
"""
type ReservedJavaKeywordAllFieldCases {
	""" A field with a java reserved name which is an enum """ 
    if: Unit
    
    """ A field with a _non_ java reserved name which is an interface (to check standard behavior) """
    nonJavaKeywordField: WithID
	
	""" A field with a java reserved name which is an interface """
    implements: WithID
    
	""" A field with a java reserved name which is a scalar (standard) """
    import: String
	
	""" A field with a java reserved name which is a scalar (custom) """
    instanceof: MyCustomScalarForADate
    
	""" A field with a java reserved name which is an object type """
    int: Human
    
	""" A field with a java reserved name which is a union """
    interface: AnyCharacter
}

""" A class to test the issues #154 and #198 """
type ClassWithCustomId {
	id: CustomId!
}

""" Test for issue 202: a class attribute would generated a forbidden getClass """
interface InterfaceTestForIssue202 {
	class: String
}
type ClassTestForIssue202 implements InterfaceTestForIssue202 {
	class: String
}

#############################
# test for issue #205:
# These classes contains Json and Object fields
input InputWithJson {
	test: String
	date: MyCustomScalarForADate!
	long: Long!
	boolean: Boolean!
	enum: Episode!
	json: JSON!
	jsons: [JSON!]!
}
type TypeWithJson {
	test: String
	withArguments(
		test: String,
		date: MyCustomScalarForADate!,
		long: Long!,
		boolean: Boolean!,
		enum: Episode!,
		json: JSON!,
		jsons: [JSON!]!): String
	date: MyCustomScalarForADate!
	long: Long!
	boolean: Boolean!
	enum: Episode!
	json: JSON!
	jsons: [JSON!]!
}
input InputWithObject {
	test: String
	date: MyCustomScalarForADate!
	long: Long!
	boolean: Boolean!
	enum: Episode!
	object: Object!
	objects: [Object!]!
}
type TypeWithObject {
	test: String
	withArguments(
		test: String,
		date: MyCustomScalarForADate!,
		long: Long!,
		boolean: Boolean!,
		enum: Episode!,
		object: Object!,
		objects: [Object!]!): String
	date: MyCustomScalarForADate!
	long: Long!
	boolean: Boolean!
	enum: Episode!
	object: Object!
	objects: [Object!]!
}
" A recursive input type, to check the plugin's behaviour when searching for JSON fields "
input RecursiveTypeWithJsonField {
	id: ID
	json: JSON
	recursion: RecursiveTypeWithJsonField
}

# Issue 228 : object type with more than one ID field

interface InterfaceForIssue228TwoIDFields {
	id1: ID,
	id2: ID
}

type TypeForIssue228TwoIDFields implements InterfaceForIssue228TwoIDFields {
	id1: ID,
	id2: ID,
	name: String
} 

interface InterfaceForIssue228ThreeIDFields implements InterfaceForIssue228TwoIDFields {
	id1: ID,
	id2: ID,
	id3: ID
} 

type TypeForIssue228ThreeIDFields implements InterfaceForIssue228TwoIDFields & InterfaceForIssue228ThreeIDFields {
	id1: ID,
	id2: ID,
	id3: ID,
	name: String
} 

