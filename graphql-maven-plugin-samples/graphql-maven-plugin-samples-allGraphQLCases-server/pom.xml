<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.graphql-java-generator</groupId>
		<artifactId>graphql-maven-plugin-samples</artifactId>
		<version>local-SNAPSHOT</version>
	</parent>

	<artifactId>graphql-maven-plugin-samples-allGraphQLCases-server</artifactId>

	<build>
		<plugins>
			<plugin>
				<groupId>com.graphql-java-generator</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>generateServerCode</goal>
						</goals>
						<configuration>
							<!-- addRelayConnections will generate all the Relay Connection stuff 
								(Node, Edge and Connection interfaces, and creating the XxxEdge and XxxConnection 
								interfaces or objects), for fields marked with the RelayConnection directive. 
								See the documentation for more information -->
							<addRelayConnections>true</addRelayConnections>
							<generateDataFetcherForEveryFieldsWithArguments>true</generateDataFetcherForEveryFieldsWithArguments>
							<!-- The ignored mappings below are checked in the 'GenerateCodeDocumentParserTest' test class -->
							<ignoredSpringMappings>
								Bar140 ,
								IBar140 Character.name MyQueryType.checkOverriddenController 
							</ignoredSpringMappings>
							<packageName>org.allGraphQLCases.server</packageName>
							<separateUtilityClasses>false</separateUtilityClasses>
							<schemaFileFolder>../graphql-maven-plugin-samples-allGraphQLCases-client/src/graphqls/allGraphQLCases</schemaFileFolder>
							<schemaPersonalizationFile>/src/main/graphql/schema_personalization.json</schemaPersonalizationFile>
							<customScalars>
								<customScalar>
									<graphQLTypeName>Base64String</graphQLTypeName>
									<javaType>byte[]</javaType>
									<graphQLScalarTypeStaticField>com.graphql_java_generator.customscalars.GraphQLScalarTypeBase64String.GraphQLBase64String</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>CustomId</graphQLTypeName>
									<javaType>com.generated.graphql.samples.customscalar.CustomId</javaType>
									<graphQLScalarTypeStaticField>com.generated.graphql.samples.customscalar.GraphQLScalarTypeCustomId.CustomIdScalarType</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>MyCustomScalarForADate</graphQLTypeName>
									<javaType>java.util.Date</javaType>
									<graphQLScalarTypeStaticField>com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>MyCustomScalarForADateTime</graphQLTypeName>
									<javaType>java.time.OffsetDateTime</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.DateTime</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>else</graphQLTypeName>
									<javaType>java.lang.String</javaType>
									<graphQLScalarTypeGetter>org.allGraphQLCases.server.impl.GraphQLScalarTypeElse.getElseScalar()</graphQLScalarTypeGetter>
								</customScalar>
								<customScalar>
									<graphQLTypeName>JSON</graphQLTypeName>
									<javaType>com.fasterxml.jackson.databind.node.ObjectNode</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.Json</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>MyBoolean</graphQLTypeName>
									<javaType>java.lang.Boolean</javaType>
									<graphQLScalarTypeStaticField>com.generated.graphql.samples.customscalar.GraphQLScalarTypeMyBoolean.MyBooleanScalarType</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>Long</graphQLTypeName>
									<javaType>java.lang.Long</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.GraphQLLong</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>NonNegativeInt</graphQLTypeName>
									<javaType>java.lang.Integer</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.NonNegativeInt</graphQLScalarTypeStaticField>
								</customScalar>
								<customScalar>
									<graphQLTypeName>Object</graphQLTypeName>
									<javaType>java.lang.Object</javaType>
									<graphQLScalarTypeStaticField>graphql.scalars.ExtendedScalars.Object</graphQLScalarTypeStaticField>
								</customScalar>
							</customScalars>
							<!-- ServerINputPrefix -->
							<inputPrefix>SINP_</inputPrefix>
							<!-- ServerINputSuffix -->
							<inputSuffix>_SINS</inputSuffix>
							<!-- ServerTypePrefix -->
							<typePrefix>STP_</typePrefix>
							<!-- ServerTypeSuffix etc. -->
							<typeSuffix>_STS</typeSuffix>
							<interfacePrefix>SIP_</interfacePrefix>
							<interfaceSuffix>_SIS</interfaceSuffix>
							<unionPrefix>SUP_</unionPrefix>
							<unionSuffix>_SUS</unionSuffix>
							<enumPrefix>SEP_</enumPrefix>
							<enumSuffix>_SES</enumSuffix>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/graphql-maven-plugin</source>
							</sources>
							<resources>
								<resource>${project.build.directory}/generated-resources/graphql-maven-plugin</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>add-resource</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>add-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${project.build.directory}/generated-resources/graphql-maven-plugin</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<!-- We don't want to spam the repository with test/sample artefacts -->
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- Dependencies for tests -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Dependencies for the generated code -->
		<dependency>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-java-server-runtime</artifactId>
		</dependency>

		<!-- Mandatory to enable Web Sockets for Spring-mvc application (mandatory for subscription) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>

		<!-- Dependencies for the generated code -->
		<!-- dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
		</dependency>

		<!-- Dependencies for the custom scalars -->
		<dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphql-java-extended-scalars</artifactId>
		</dependency>

		<!-- Other dependencies -->
		<dependency>
			<groupId>com.github.dozermapper</groupId>
			<artifactId>dozer-core</artifactId>
		</dependency>

	</dependencies>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<reportSets>
					<reportSet>
						<id>non-aggregate</id>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
				<configuration>
					<source>8</source>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

</project>