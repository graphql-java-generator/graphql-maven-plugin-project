/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.client.allGraphQLCases;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.client.GraphQLObjectMapper;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Human")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class Human implements Character, Commented, WithID, AnyCharacter {

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public Human() {
		// No action
	}

	@JsonProperty("id")
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = java.lang.String.class)
	java.lang.String id;

	@JsonProperty("name")
	@GraphQLInputParameters(names = { "uppercase" }, types = { "Boolean" }, mandatories = { false }, listDepths = {
			0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String name;

	@JsonProperty("bestFriend")
	@GraphQLNonScalar(fieldName = "bestFriend", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character bestFriend;

	@JsonProperty("friends")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListCharacter.class)
	@GraphQLNonScalar(fieldName = "friends", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	List<Character> friends;

	@JsonProperty("nbComments")
	@GraphQLScalar(fieldName = "nbComments", graphQLTypeSimpleName = "Int", javaClass = java.lang.Integer.class)
	java.lang.Integer nbComments;

	@JsonProperty("comments")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListString.class)
	@GraphQLScalar(fieldName = "comments", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	List<java.lang.String> comments;

	@JsonProperty("appearsIn")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEpisode.class)
	@GraphQLScalar(fieldName = "appearsIn", graphQLTypeSimpleName = "Episode", javaClass = Episode.class)
	List<Episode> appearsIn;

	@JsonProperty("homePlanet")
	@GraphQLScalar(fieldName = "homePlanet", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String homePlanet;

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = java.lang.String.class)
	java.lang.String __typename;

	/**
	 */
	@Override
	@JsonIgnore
	public void setId(java.lang.String id) {
		if (id == null || id instanceof java.lang.String) {
			this.id = id;
		} else {
			throw new IllegalArgumentException(
					"The given id should be an instance of java.lang.String, but is an instance of "
							+ id.getClass().getName());
		}
	}

	/**
	 */
	@Override
	public java.lang.String getId() {
		return id;
	}

	/**
	 */
	@Override
	@JsonIgnore
	public void setName(java.lang.String name) {
		if (name == null || name instanceof java.lang.String) {
			this.name = name;
		} else {
			throw new IllegalArgumentException(
					"The given name should be an instance of java.lang.String, but is an instance of "
							+ name.getClass().getName());
		}
	}

	/**
	 */
	@Override
	public java.lang.String getName() {
		return name;
	}

	public void setBestFriend(Character bestFriend) {
		this.bestFriend = bestFriend;
	}

	public Character getBestFriend() {
		return bestFriend;
	}

	/**
	 */
	@Override
	@JsonIgnore
	public void setFriends(List<Character> friends) {
		if (friends == null || friends instanceof List) {
			this.friends = friends;
		} else {
			throw new IllegalArgumentException(
					"The given friends should be an instance of List<Character>, but is an instance of "
							+ friends.getClass().getName());
		}
	}

	/**
	 */
	@Override
	public List<Character> getFriends() {
		return friends;
	}

	/**
	 */
	@JsonIgnore
	public List<Character> getFriendsCharacter() {
		return friends;
	}

	/**
	 */
	@Override
	@JsonIgnore
	public void setNbComments(java.lang.Integer nbComments) {
		if (nbComments == null || nbComments instanceof java.lang.Integer) {
			this.nbComments = nbComments;
		} else {
			throw new IllegalArgumentException(
					"The given nbComments should be an instance of java.lang.Integer, but is an instance of "
							+ nbComments.getClass().getName());
		}
	}

	/**
	 */
	@Override
	public java.lang.Integer getNbComments() {
		return nbComments;
	}

	/**
	 */
	@Override
	@JsonIgnore
	public void setComments(List<java.lang.String> comments) {
		if (comments == null || comments instanceof List) {
			this.comments = comments;
		} else {
			throw new IllegalArgumentException(
					"The given comments should be an instance of List<java.lang.String>, but is an instance of "
							+ comments.getClass().getName());
		}
	}

	/**
	 */
	@Override
	public List<java.lang.String> getComments() {
		return comments;
	}

	/**
	 */
	public List<java.lang.String> getCommentsString() {
		return comments;
	}

	/**
	 */
	@Override
	@JsonIgnore
	public void setAppearsIn(List<Episode> appearsIn) {
		if (appearsIn == null || appearsIn instanceof List) {
			this.appearsIn = appearsIn;
		} else {
			throw new IllegalArgumentException(
					"The given appearsIn should be an instance of List<Episode>, but is an instance of "
							+ appearsIn.getClass().getName());
		}
	}

	/**
	 */
	@Override
	public List<Episode> getAppearsIn() {
		return appearsIn;
	}

	/**
	 */
	@JsonIgnore
	public List<Episode> getAppearsInEpisode() {
		return appearsIn;
	}

	public void setHomePlanet(java.lang.String homePlanet) {
		this.homePlanet = homePlanet;
	}

	public java.lang.String getHomePlanet() {
		return homePlanet;
	}

	/**
	 */
	@Override
	@JsonIgnore
	public void set__typename(java.lang.String __typename) {
		if (__typename == null || __typename instanceof java.lang.String) {
			this.__typename = __typename;
		} else {
			throw new IllegalArgumentException(
					"The given __typename should be an instance of java.lang.String, but is an instance of "
							+ __typename.getClass().getName());
		}
	}

	/**
	 */
	@Override
	public java.lang.String get__typename() {
		return __typename;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	@Override
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	@Override
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

	@Override
	public String toString() {
		return "Human {" + "id: " + id + ", " + "name: " + name + ", " + "bestFriend: " + bestFriend + ", "
				+ "friends: " + friends + ", " + "nbComments: " + nbComments + ", " + "comments: " + comments + ", "
				+ "appearsIn: " + appearsIn + ", " + "homePlanet: " + homePlanet + ", " + "__typename: " + __typename
				+ "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private java.lang.String id;
		private java.lang.String name;
		private Character bestFriend;
		private List<Character> friends;
		private java.lang.Integer nbComments;
		private List<java.lang.String> comments;
		private List<Episode> appearsIn;
		private java.lang.String homePlanet;

		public Builder withId(java.lang.String id) {
			this.id = id;
			return this;
		}

		public Builder withName(java.lang.String name) {
			this.name = name;
			return this;
		}

		public Builder withBestFriend(Character bestFriend) {
			this.bestFriend = bestFriend;
			return this;
		}

		public Builder withFriends(List<Character> friends) {
			this.friends = friends;
			return this;
		}

		public Builder withNbComments(java.lang.Integer nbComments) {
			this.nbComments = nbComments;
			return this;
		}

		public Builder withComments(List<java.lang.String> comments) {
			this.comments = comments;
			return this;
		}

		public Builder withAppearsIn(List<Episode> appearsIn) {
			this.appearsIn = appearsIn;
			return this;
		}

		public Builder withHomePlanet(java.lang.String homePlanet) {
			this.homePlanet = homePlanet;
			return this;
		}

		public Human build() {
			Human _object = new Human();
			_object.setId(id);
			_object.setName(name);
			_object.setBestFriend(bestFriend);
			_object.setFriends(friends);
			_object.setNbComments(nbComments);
			_object.setComments(comments);
			_object.setAppearsIn(appearsIn);
			_object.setHomePlanet(homePlanet);
			_object.set__typename("Human");
			return _object;
		}
	}
}
