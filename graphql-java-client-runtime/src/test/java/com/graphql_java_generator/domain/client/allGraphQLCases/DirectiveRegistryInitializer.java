/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.client.allGraphQLCases;

import com.graphql_java_generator.client.CustomScalarRegistryImpl;
import com.graphql_java_generator.client.directive.Directive;
import com.graphql_java_generator.client.directive.DirectiveLocation;
import com.graphql_java_generator.client.directive.DirectiveRegistry;
import com.graphql_java_generator.client.directive.DirectiveRegistryImpl;
import com.graphql_java_generator.client.request.InputParameter;
import com.graphql_java_generator.client.request.InputParameter.InputParameterType;

@SuppressWarnings("unused")
public class DirectiveRegistryInitializer {

	/**
	 * Initialization of the {@link DirectiveRegistry} with all known custom scalars, that is with all custom scalars
	 * defined in the project pom
	 */
	public static DirectiveRegistry initDirectiveRegistry() {
		DirectiveRegistry directiveRegistry = new DirectiveRegistryImpl();
		Directive directive;

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive skip
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("skip");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "if", null, "Boolean", true, 0, false));
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD);
		directive.getDirectiveLocations().add(DirectiveLocation.FRAGMENT_SPREAD);
		directive.getDirectiveLocations().add(DirectiveLocation.INLINE_FRAGMENT);
		directiveRegistry.registerDirective(directive);

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive include
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("include");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "if", null, "Boolean", true, 0, false));
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD);
		directive.getDirectiveLocations().add(DirectiveLocation.FRAGMENT_SPREAD);
		directive.getDirectiveLocations().add(DirectiveLocation.INLINE_FRAGMENT);
		directiveRegistry.registerDirective(directive);

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive defer
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("defer");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "if", null, "Boolean", true, 0, false));
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD);
		directiveRegistry.registerDirective(directive);

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive deprecated
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("deprecated");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "reason", null, "String", false, 0, false));
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.ENUM_VALUE);
		directiveRegistry.registerDirective(directive);

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive IDScalarDirective
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("IDScalarDirective");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getDirectiveLocations().add(DirectiveLocation.SCALAR);
		directiveRegistry.registerDirective(directive);

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive RelayConnection
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("RelayConnection");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD_DEFINITION);
		directiveRegistry.registerDirective(directive);

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive generateDataLoaderForLists
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("generateDataLoaderForLists");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD_DEFINITION);
		directiveRegistry.registerDirective(directive);

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive testExtendKeyword
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("testExtendKeyword");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getDirectiveLocations().add(DirectiveLocation.QUERY);
		directive.getDirectiveLocations().add(DirectiveLocation.MUTATION);
		directive.getDirectiveLocations().add(DirectiveLocation.SUBSCRIPTION);
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD);
		directive.getDirectiveLocations().add(DirectiveLocation.FRAGMENT_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.FRAGMENT_SPREAD);
		directive.getDirectiveLocations().add(DirectiveLocation.INLINE_FRAGMENT);
		directive.getDirectiveLocations().add(DirectiveLocation.SCHEMA);
		directive.getDirectiveLocations().add(DirectiveLocation.SCALAR);
		directive.getDirectiveLocations().add(DirectiveLocation.OBJECT);
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.ARGUMENT_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.INTERFACE);
		directive.getDirectiveLocations().add(DirectiveLocation.UNION);
		directive.getDirectiveLocations().add(DirectiveLocation.ENUM);
		directive.getDirectiveLocations().add(DirectiveLocation.ENUM_VALUE);
		directive.getDirectiveLocations().add(DirectiveLocation.INPUT_OBJECT);
		directive.getDirectiveLocations().add(DirectiveLocation.INPUT_FIELD_DEFINITION);
		directiveRegistry.registerDirective(directive);

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive testDirective
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("testDirective");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "value", null, "String", true, 0, false));
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "anotherValue", null, "String", false, 0, false));
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "anArray", null, "String", false, 1, true));
		directive.getArguments().add(
				InputParameter.newHardCodedParameter("MySchema", "anObject", null, "CharacterInput", false, 0, false));
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "anInt", null, "Int", false, 0, false));
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "aFloat", null, "Float", false, 0, false));
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "aBoolean", null, "Boolean", false, 0, false));
		directive.getArguments()
				.add(InputParameter.newHardCodedParameter("MySchema", "anID", null, "ID", false, 0, false));
		directive.getArguments().add(
				InputParameter.newHardCodedParameter("MySchema", "aCustomScalarDate", null, "Date", false, 0, false));
		directive.getDirectiveLocations().add(DirectiveLocation.QUERY);
		directive.getDirectiveLocations().add(DirectiveLocation.MUTATION);
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD);
		directive.getDirectiveLocations().add(DirectiveLocation.FRAGMENT_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.FRAGMENT_SPREAD);
		directive.getDirectiveLocations().add(DirectiveLocation.INLINE_FRAGMENT);
		directive.getDirectiveLocations().add(DirectiveLocation.SCHEMA);
		directive.getDirectiveLocations().add(DirectiveLocation.SCALAR);
		directive.getDirectiveLocations().add(DirectiveLocation.OBJECT);
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.ARGUMENT_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.INTERFACE);
		directive.getDirectiveLocations().add(DirectiveLocation.UNION);
		directive.getDirectiveLocations().add(DirectiveLocation.ENUM);
		directive.getDirectiveLocations().add(DirectiveLocation.ENUM_VALUE);
		directive.getDirectiveLocations().add(DirectiveLocation.INPUT_OBJECT);
		directive.getDirectiveLocations().add(DirectiveLocation.INPUT_FIELD_DEFINITION);
		directiveRegistry.registerDirective(directive);

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive anotherTestDirective
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("anotherTestDirective");
		directive.setPackageName("com.graphql_java_generator.domain.client.allGraphQLCases");
		directive.getDirectiveLocations().add(DirectiveLocation.QUERY);
		directive.getDirectiveLocations().add(DirectiveLocation.MUTATION);
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD);
		directive.getDirectiveLocations().add(DirectiveLocation.FRAGMENT_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.FRAGMENT_SPREAD);
		directive.getDirectiveLocations().add(DirectiveLocation.INLINE_FRAGMENT);
		directive.getDirectiveLocations().add(DirectiveLocation.SCHEMA);
		directive.getDirectiveLocations().add(DirectiveLocation.SCALAR);
		directive.getDirectiveLocations().add(DirectiveLocation.OBJECT);
		directive.getDirectiveLocations().add(DirectiveLocation.FIELD_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.ARGUMENT_DEFINITION);
		directive.getDirectiveLocations().add(DirectiveLocation.INTERFACE);
		directive.getDirectiveLocations().add(DirectiveLocation.UNION);
		directive.getDirectiveLocations().add(DirectiveLocation.ENUM);
		directive.getDirectiveLocations().add(DirectiveLocation.ENUM_VALUE);
		directive.getDirectiveLocations().add(DirectiveLocation.INPUT_OBJECT);
		directive.getDirectiveLocations().add(DirectiveLocation.INPUT_FIELD_DEFINITION);
		directiveRegistry.registerDirective(directive);

		DirectiveRegistryImpl.directiveRegistry = directiveRegistry;
		return directiveRegistry;
	} 

}
