/** Generated by the default template from graphql-java-generator */
package com.graphql_java_generator.domain.client.allGraphQLCases;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.graphql.client.GraphQlClient;
import org.springframework.stereotype.Component;

import com.graphql_java_generator.annotation.RequestType;
import com.graphql_java_generator.client.GraphQLSubscriptionExecutor;
import com.graphql_java_generator.client.GraphqlClientUtils;
import com.graphql_java_generator.client.SubscriptionCallback;
import com.graphql_java_generator.client.SubscriptionClient;
import com.graphql_java_generator.client.request.InputParameter;
import com.graphql_java_generator.client.request.InputParameter.InputParameterType;
import com.graphql_java_generator.client.request.ObjectResponse;
import com.graphql_java_generator.customscalars.GraphQLScalarTypeDate;
import com.graphql_java_generator.exception.GraphQLRequestExecutionException;
import com.graphql_java_generator.exception.GraphQLRequestPreparationException;
import com.graphql_java_generator.util.GraphqlUtils;

/**
 * This class contains the methods that allows the execution of the subscriptions that are defined in the
 * TheSubscriptionType of the GraphQL schema.<BR/>
 * These methods allows:
 * <UL>
 * <LI>Preparation of partial subscription requests</LI>
 * <LI>Execution of partial prepared subscription requests</LI>
 * <LI>Execution of partial direct subscription requests</LI>
 * </UL>
 * You'll find all the documentation on the
 * <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client_subscription.html">subscription
 * client page doc</A>.
 * 
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Component
@SuppressWarnings("unused")
public class TheSubscriptionTypeExecutorMySchema implements GraphQLSubscriptionExecutor {

	/** Logger for this class */
	private static Logger logger = LoggerFactory.getLogger(TheSubscriptionTypeExecutorMySchema.class);

	@Autowired
	@Qualifier("MySchema")
	GraphQlClient graphQlClient;

	GraphqlUtils graphqlUtils = GraphqlUtils.graphqlUtils;
	@Autowired
	GraphqlClientUtils graphqlClientUtils;

	public TheSubscriptionTypeExecutorMySchema() {
		CustomScalarRegistryInitializer.initCustomScalarRegistry();
		DirectiveRegistryInitializer.initDirectiveRegistry();
	}

	/**
	 * This method takes a <B>full request</B> definition, and executes the it against the GraphQL server. That is, the
	 * request contains the full string that <B><U>follows</U></B> the query/mutation/subscription keyword.<BR/>
	 * It offers a logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).<BR/>
	 * For instance:
	 * 
	 * <PRE>
	 * Map<String, Object> params = new HashMap<>();
	 * params.put("heroParam", heroParamValue);
	 * params.put("skip", Boolean.FALSE);
	 * 
	 * MyQueryType response = myQueryType.execWithBindValues("subscription {subscribeToNewHeros {id name}}", params);
	 * Character c = response.getHero();
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above). It must
	 *            ommit the query/mutation/subscription keyword, and start by the first { that follows.It may contain
	 *            directives, as explained in the GraphQL specs.
	 * @param parameters
	 *            The map of values, for the bind variables defined in the query. If there is no bind variable in the
	 *            defined Query, this argument may be null or an empty {@link Map}. The key is the parameter name, as
	 *            defined in the query (in the above sample: heroParam is an optional parameter and skip is a mandatory
	 *            one). The value is the parameter vale in its Java type (for instance a {@link Date} for the
	 *            {@link GraphQLScalarTypeDate}). The parameters which value is missing in this map will no be
	 *            transmitted toward the GraphQL server.
	 * @return The {@link SubscriptionClient} that allows the caller to act on the subscribed subscription.
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient execWithBindValues(String queryResponseDef, SubscriptionCallback<?> subscriptionCallback,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription {} ", queryResponseDef);
		ObjectResponse objectResponse = getResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return exec(objectResponse, subscriptionCallback, parameters);
	}

	/**
	 * This method takes a <B>full request</B> definition, and executes it against the GraphQL server. That is, the
	 * query contains the full string that <B><U>follows</U></B> the query/mutation/subscription keyword.<BR/>
	 * It offers a logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).<BR/>
	 * For instance:
	 * 
	 * <PRE>
	 * MyQueryType response = myQueryType.execWithBindValues(
	 * 		"{hero(param:?heroParam) @include(if:true) {id name @skip(if: ?skip) appearsIn friends {id name}}}",
	 * 		"heroParam", heroParamValue, "skip", Boolean.FALSE);
	 * Character c = response.getHero();
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the query, in the native GraphQL format (see here above). It must ommit the
	 *            query/mutation/subscription keyword, and start by the first { that follows.It may contain directives,
	 *            as explained in the GraphQL specs.
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @return The {@link SubscriptionClient} that allows the caller to act on the subscribed subscription.
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient exec(String queryResponseDef, SubscriptionCallback<?> subscriptionCallback,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription {} ", queryResponseDef);
		ObjectResponse objectResponse = getResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return execWithBindValues(objectResponse, subscriptionCallback,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * This method takes a <B>full request</B> definition, and executes it against the GraphQL server. That is, the
	 * query contains the full string that <B><U>follows</U></B> the query/mutation/subscription keyword.<BR/>
	 * It offers a logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).<BR/>
	 * For instance:
	 * 
	 * <PRE>
	 * ObjectResponse response;
	 * 
	 * public void setup() {
	 * 	// Preparation of the query
	 * 	objectResponse = myQueryType.getResponseBuilder()
	 * 			.withQueryResponseDef("{hero(param:?heroParam) @include(if:true) {id name @skip(if: ?skip) appearsIn friends {id name}}}").build();
	 * }
	 * 
	 * public void doTheJob() {
	 * ..
	 * Map<String, Object> params = new HashMap<>();
	 * params.put("heroParam", heroParamValue);
	 * params.put("skip", Boolean.FALSE);
	 * // This will set the value sinceValue to the sinceParam field parameter
	 * MyQueryType response = queryType.execWithBindValues(objectResponse, params);
	 * Character c = response.getHero();
	 * ...
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param parameters
	 *            The list of values, for the bind variables defined in the query. If there is no bind variable in the
	 *            defined Query, this argument may be null or an empty {@link Map}
	 * @return The {@link SubscriptionClient} that allows the caller to act on the subscribed subscription.
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@SuppressWarnings({ "deprecation", "unchecked", "rawtypes" })
	public SubscriptionClient execWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<?> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			if (parameters == null) {
				logger.trace("Executing subscription without parameters");
			} else {
				StringBuffer sb = new StringBuffer("Executing root subscription with parameters: ");
				boolean addComma = false;
				for (String key : parameters.keySet()) {
					sb.append(key).append(":").append(parameters.get(key));
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
				logger.trace(sb.toString());
			}
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'TheSubscriptionType'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();

		// The subscription may only subscribe to one subscription at a time, even for a full request.
		// Let's check that, and find the type returned by this subscription (that is: the type of the notifications
		// that will be received)
		//
		// The subscription must query only one subscription
		if (objectResponse.getQuery() != null || objectResponse.getMutation() != null) {
			throw new GraphQLRequestExecutionException(
					"This method may only be called for subscription, but the given GraphQL request is a "
							+ (objectResponse.getQuery() != null ? "query" : "mutation"));
		}
		if (objectResponse.getSubscription() == null) {
			throw new GraphQLRequestExecutionException(
					"This method may only be called for subscription, but the given GraphQL request has no mutation field");
		}
		if (objectResponse.getSubscription().getFields().size() != 1) {
			throw new GraphQLRequestExecutionException(
					"Full Request for subscription may only be called for one subscription, but the given GraphQL request has "
							+ objectResponse.getSubscription().getFields().size() + " subscription fields");
		}

		// It's probably possible to do much better than this switch!
		// If someone has a better idea to call this parameterized method, please come in.
		switch (objectResponse.getSubscription().getFields().get(0).getName()) {
		case "subscribeNewHumanForEpisode":
			return objectResponse.exec(parameters, (SubscriptionCallback<Human>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, Human.class);
		case "subscribeToAList":
			return objectResponse.exec(parameters, (SubscriptionCallback<List>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, List.class);
		case "subscribeToAListOfScalars":
			return objectResponse.exec(parameters, (SubscriptionCallback<List>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, List.class);
		case "issue53":
			return objectResponse.exec(parameters, (SubscriptionCallback<java.util.Date>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, java.util.Date.class);
		case "allGraphQLCasesInput":
			return objectResponse.exec(parameters, (SubscriptionCallback<AllFieldCases>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, AllFieldCases.class);
		case "allGraphQLCasesParam":
			return objectResponse.exec(parameters, (SubscriptionCallback<AllFieldCases>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, AllFieldCases.class);
		case "subscriptionTest":
			return objectResponse.exec(parameters, (SubscriptionCallback<java.lang.String>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, java.lang.String.class);
		case "subscriptionWithNullResponse":
			return objectResponse.exec(parameters, (SubscriptionCallback<java.lang.String>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, java.lang.String.class);
		case "enumWithReservedJavaKeywordAsValues":
			return objectResponse.exec(parameters,
					(SubscriptionCallback<EnumWithReservedJavaKeywordAsValues>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, EnumWithReservedJavaKeywordAsValues.class);
		case "listOfEnumWithReservedJavaKeywordAsValues":
			return objectResponse.exec(parameters, (SubscriptionCallback<List>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, List.class);
		case "if":
			return objectResponse.exec(parameters, (SubscriptionCallback<java.lang.String>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, java.lang.String.class);
		case "implements":
			return objectResponse.exec(parameters, (SubscriptionCallback<java.lang.String>) subscriptionCallback,
					TheSubscriptionTypeResponse.class, java.lang.String.class);
		default:
			throw new GraphQLRequestExecutionException(
					"Unexpected field name: " + objectResponse.getSubscription().getFields().get(0).getName());
		}
	}

	/**
	 * This method takes a <B>full request</B> definition, and executes it against the GraphQL server. That is, the
	 * query contains the full string that <B><U>follows</U></B> the query/mutation/subscription keyword.<BR/>
	 * It offers a logging of the call (if in debug mode), or of the call and its parameters (if in trace mode).<BR/>
	 * For instance:
	 * 
	 * <PRE>
	 * ObjectResponse response;
	 * 
	 * public void setup() {
	 * 	// Preparation of the query
	 * 	 objectResponse = myQueryType.getResponseBuilder()
	 * 			.withQueryResponseDef("{hero(param:?heroParam) @include(if:true) {id name @skip(if: ?skip) appearsIn friends {id name}}}").build();
	 * }
	 * 
	 * public void doTheJob() {
	 * ..
	 * // This will set the value sinceValue to the sinceParam field parameter
	 * MyQueryType response = queryType.exec(objectResponse, "heroParam", heroParamValue, "skip", Boolean.FALSE);
	 * Character c = response.getHero();
	 * ...
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @return The {@link SubscriptionClient} that allows the caller to act on the subscribed subscription.
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient exec(ObjectResponse objectResponse, SubscriptionCallback<?> subscriptionCallback,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		return execWithBindValues(objectResponse, subscriptionCallback,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for a <B>full request</B>, as expected by the
	 * exec and execWithBindValues methods.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class);
	}

	/**
	 * Get the {@link GraphQLRequest} for <B>full request</B>. For instance:
	 * 
	 * <PRE>
	 * GraphQLRequest request = new GraphQLRequest(fullRequest);
	 * </PRE>
	 * 
	 * @param fullRequest
	 *            The full GraphQLRequest, as specified in the GraphQL specification
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getGraphQLRequest(String fullRequest) throws GraphQLRequestPreparationException {
		return new GraphQLRequest(fullRequest);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Human>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param episode
	 *            Parameter for the subscribeNewHumanForEpisode field of TheSubscriptionType, as defined in the GraphQL
	 *            schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscribeNewHumanForEpisodeWithBindValues(String queryResponseDef,
			SubscriptionCallback<Human> subscriptionCallback, Episode episode, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscribeNewHumanForEpisode': {} ", queryResponseDef);
		ObjectResponse objectResponse = getSubscribeNewHumanForEpisodeResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return subscribeNewHumanForEpisode(objectResponse, subscriptionCallback, episode, parameters);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Human>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param episode
	 *            Parameter for the subscribeNewHumanForEpisode field of TheSubscriptionType, as defined in the GraphQL
	 *            schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscribeNewHumanForEpisode(String queryResponseDef,
			SubscriptionCallback<Human> subscriptionCallback, Episode episode, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscribeNewHumanForEpisode'. queryResponseDef is '{}'",
				queryResponseDef);
		ObjectResponse objectResponse = getSubscribeNewHumanForEpisodeResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return subscribeNewHumanForEpisodeWithBindValues(objectResponse, subscriptionCallback, episode,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Human>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param episode
	 *            Parameter for the subscribeNewHumanForEpisode field of TheSubscriptionType, as defined in the GraphQL
	 *            schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscribeNewHumanForEpisodeWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<Human> subscriptionCallback, Episode episode, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'subscribeNewHumanForEpisode' with parameters: {} ", episode);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscribeNewHumanForEpisode'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();
		parameters.put("theSubscriptionTypeSubscribeNewHumanForEpisodeEpisode", episode);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, Human.class);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Human>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param episode
	 *            Parameter for the subscribeNewHumanForEpisode field of TheSubscriptionType, as defined in the GraphQL
	 *            schema
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscribeNewHumanForEpisode(ObjectResponse objectResponse,
			SubscriptionCallback<Human> subscriptionCallback, Episode episode, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'subscribeNewHumanForEpisode' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscribeNewHumanForEpisode' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);
		parameters.put("theSubscriptionTypeSubscribeNewHumanForEpisodeEpisode", episode);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, Human.class);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the Human, as expected by the
	 * subscribeNewHumanForEpisode subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getSubscribeNewHumanForEpisodeResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class,
				"subscribeNewHumanForEpisode", RequestType.subscription,
				InputParameter.newBindParameter("MySchema", "episode",
						"theSubscriptionTypeSubscribeNewHumanForEpisodeEpisode", InputParameterType.MANDATORY,
						"Episode", true, 0, false));
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link GraphQLRequest} for the subscribeNewHumanForEpisode executor, created with the given Partial
	 * request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getSubscribeNewHumanForEpisodeGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription,
				"subscribeNewHumanForEpisode",
				InputParameter.newBindParameter("MySchema", "episode",
						"theSubscriptionTypeSubscribeNewHumanForEpisodeEpisode", InputParameterType.MANDATORY,
						"Episode", true, 0, false));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Integer>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscribeToAListWithBindValues(String queryResponseDef,
			SubscriptionCallback<List<java.lang.Integer>> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscribeToAList': {} ", queryResponseDef);
		ObjectResponse objectResponse = getSubscribeToAListResponseBuilder().withQueryResponseDef(queryResponseDef)
				.build();
		return subscribeToAList(objectResponse, subscriptionCallback, parameters);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Integer>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscribeToAList(String queryResponseDef,
			SubscriptionCallback<List<java.lang.Integer>> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscribeToAList'. queryResponseDef is '{}'", queryResponseDef);
		ObjectResponse objectResponse = getSubscribeToAListResponseBuilder().withQueryResponseDef(queryResponseDef)
				.build();
		return subscribeToAListWithBindValues(objectResponse, subscriptionCallback,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Integer>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SubscriptionClient subscribeToAListWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<List<java.lang.Integer>> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'subscribeToAList' with parameters: ");
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscribeToAList'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();

		// This ugly double casting is necessary to make the code compile. If anyone has a better idea... please raise
		// an issue
		return objectResponse.exec(parameters, (SubscriptionCallback<List>) (Object) subscriptionCallback,
				TheSubscriptionType.class, List.class);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Integer>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SubscriptionClient subscribeToAList(ObjectResponse objectResponse,
			SubscriptionCallback<List<java.lang.Integer>> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'subscribeToAList' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscribeToAList' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);

		return objectResponse.exec(parameters, (SubscriptionCallback<List>) (Object) subscriptionCallback,
				TheSubscriptionType.class, List.class);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the Integer, as expected by the
	 * subscribeToAList subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getSubscribeToAListResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class,
				"subscribeToAList", RequestType.subscription);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link GraphQLRequest} for the subscribeToAList executor, created with the given Partial request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getSubscribeToAListGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription, "subscribeToAList");
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Date>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscribeToAListOfScalarsWithBindValues(String queryResponseDef,
			SubscriptionCallback<List<java.util.Date>> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscribeToAListOfScalars': {} ", queryResponseDef);
		ObjectResponse objectResponse = getSubscribeToAListOfScalarsResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return subscribeToAListOfScalars(objectResponse, subscriptionCallback, parameters);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Date>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscribeToAListOfScalars(String queryResponseDef,
			SubscriptionCallback<List<java.util.Date>> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscribeToAListOfScalars'. queryResponseDef is '{}'", queryResponseDef);
		ObjectResponse objectResponse = getSubscribeToAListOfScalarsResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return subscribeToAListOfScalarsWithBindValues(objectResponse, subscriptionCallback,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Date>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SubscriptionClient subscribeToAListOfScalarsWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<List<java.util.Date>> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'subscribeToAListOfScalars' with parameters: ");
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscribeToAListOfScalars'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();

		// This ugly double casting is necessary to make the code compile. If anyone has a better idea... please raise
		// an issue
		return objectResponse.exec(parameters, (SubscriptionCallback<List>) (Object) subscriptionCallback,
				TheSubscriptionType.class, List.class);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Date>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SubscriptionClient subscribeToAListOfScalars(ObjectResponse objectResponse,
			SubscriptionCallback<List<java.util.Date>> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'subscribeToAListOfScalars' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscribeToAListOfScalars' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);

		return objectResponse.exec(parameters, (SubscriptionCallback<List>) (Object) subscriptionCallback,
				TheSubscriptionType.class, List.class);
	}

	/**
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the Date, as expected by the
	 * subscribeToAListOfScalars subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getSubscribeToAListOfScalarsResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class,
				"subscribeToAListOfScalars", RequestType.subscription);
	}

	/**
	 * Get the {@link GraphQLRequest} for the subscribeToAListOfScalars executor, created with the given Partial
	 * request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getSubscribeToAListOfScalarsGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription, "subscribeToAListOfScalars");
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Date>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param date
	 *            Parameter for the issue53 field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient issue53WithBindValues(String queryResponseDef,
			SubscriptionCallback<java.util.Date> subscriptionCallback, java.util.Date date,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'issue53': {} ", queryResponseDef);
		ObjectResponse objectResponse = getIssue53ResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return issue53(objectResponse, subscriptionCallback, date, parameters);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Date>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param date
	 *            Parameter for the issue53 field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient issue53(String queryResponseDef,
			SubscriptionCallback<java.util.Date> subscriptionCallback, java.util.Date date, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'issue53'. queryResponseDef is '{}'", queryResponseDef);
		ObjectResponse objectResponse = getIssue53ResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return issue53WithBindValues(objectResponse, subscriptionCallback, date,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Date>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param date
	 *            Parameter for the issue53 field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient issue53WithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<java.util.Date> subscriptionCallback, java.util.Date date,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'issue53' with parameters: {} ", date);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'issue53'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();
		parameters.put("theSubscriptionTypeIssue53Date", date);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.util.Date.class);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<Date>. Its {@link SubscriptionCallback#onMessage(Object)} will be
	 *            called for each notification received from this subscription.
	 * @param date
	 *            Parameter for the issue53 field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient issue53(ObjectResponse objectResponse,
			SubscriptionCallback<java.util.Date> subscriptionCallback, java.util.Date date, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'issue53' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'issue53' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);
		parameters.put("theSubscriptionTypeIssue53Date", date);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.util.Date.class);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the Date, as expected by the issue53
	 * subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getIssue53ResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class, "issue53",
				RequestType.subscription, InputParameter.newBindParameter("MySchema", "date",
						"theSubscriptionTypeIssue53Date", InputParameterType.MANDATORY, "Date", true, 0, false));
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link GraphQLRequest} for the issue53 executor, created with the given Partial request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getIssue53GraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription, "issue53",
				InputParameter.newBindParameter("MySchema", "date", "theSubscriptionTypeIssue53Date",
						InputParameterType.MANDATORY, "Date", true, 0, false));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<AllFieldCases>. Its {@link SubscriptionCallback#onMessage(Object)}
	 *            will be called for each notification received from this subscription.
	 * @param input
	 *            Parameter for the allGraphQLCasesInput field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient allGraphQLCasesInputWithBindValues(String queryResponseDef,
			SubscriptionCallback<AllFieldCases> subscriptionCallback, AllFieldCasesInput input,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'allGraphQLCasesInput': {} ", queryResponseDef);
		ObjectResponse objectResponse = getAllGraphQLCasesInputResponseBuilder().withQueryResponseDef(queryResponseDef)
				.build();
		return allGraphQLCasesInput(objectResponse, subscriptionCallback, input, parameters);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<AllFieldCases>. Its {@link SubscriptionCallback#onMessage(Object)}
	 *            will be called for each notification received from this subscription.
	 * @param input
	 *            Parameter for the allGraphQLCasesInput field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient allGraphQLCasesInput(String queryResponseDef,
			SubscriptionCallback<AllFieldCases> subscriptionCallback, AllFieldCasesInput input,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'allGraphQLCasesInput'. queryResponseDef is '{}'", queryResponseDef);
		ObjectResponse objectResponse = getAllGraphQLCasesInputResponseBuilder().withQueryResponseDef(queryResponseDef)
				.build();
		return allGraphQLCasesInputWithBindValues(objectResponse, subscriptionCallback, input,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<AllFieldCases>. Its {@link SubscriptionCallback#onMessage(Object)}
	 *            will be called for each notification received from this subscription.
	 * @param input
	 *            Parameter for the allGraphQLCasesInput field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient allGraphQLCasesInputWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<AllFieldCases> subscriptionCallback, AllFieldCasesInput input,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'allGraphQLCasesInput' with parameters: {} ", input);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'allGraphQLCasesInput'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();
		parameters.put("theSubscriptionTypeAllGraphQLCasesInputInput", input);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, AllFieldCases.class);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<AllFieldCases>. Its {@link SubscriptionCallback#onMessage(Object)}
	 *            will be called for each notification received from this subscription.
	 * @param input
	 *            Parameter for the allGraphQLCasesInput field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient allGraphQLCasesInput(ObjectResponse objectResponse,
			SubscriptionCallback<AllFieldCases> subscriptionCallback, AllFieldCasesInput input,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'allGraphQLCasesInput' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'allGraphQLCasesInput' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);
		parameters.put("theSubscriptionTypeAllGraphQLCasesInputInput", input);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, AllFieldCases.class);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the AllFieldCases, as expected by the
	 * allGraphQLCasesInput subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getAllGraphQLCasesInputResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class,
				"allGraphQLCasesInput", RequestType.subscription,
				InputParameter.newBindParameter("MySchema", "input", "theSubscriptionTypeAllGraphQLCasesInputInput",
						InputParameterType.MANDATORY, "AllFieldCasesInput", true, 0, false));
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link GraphQLRequest} for the allGraphQLCasesInput executor, created with the given Partial request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getAllGraphQLCasesInputGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription, "allGraphQLCasesInput",
				InputParameter.newBindParameter("MySchema", "input", "theSubscriptionTypeAllGraphQLCasesInputInput",
						InputParameterType.MANDATORY, "AllFieldCasesInput", true, 0, false));
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<AllFieldCases>. Its {@link SubscriptionCallback#onMessage(Object)}
	 *            will be called for each notification received from this subscription.
	 * @param id
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param name
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param age
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param integer
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param date
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param dates
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param matrix
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param oneWithoutIdSubtype
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param listWithoutIdSubtype
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient allGraphQLCasesParamWithBindValues(String queryResponseDef,
			SubscriptionCallback<AllFieldCases> subscriptionCallback, java.lang.String id, java.lang.String name,
			java.lang.Long age, java.lang.Integer integer, java.util.Date date, List<java.util.Date> dates,
			List<List<java.lang.Double>> matrix, AllFieldCasesWithoutIdSubtypeInput oneWithoutIdSubtype,
			List<AllFieldCasesWithoutIdSubtypeInput> listWithoutIdSubtype, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'allGraphQLCasesParam': {} ", queryResponseDef);
		ObjectResponse objectResponse = getAllGraphQLCasesParamResponseBuilder().withQueryResponseDef(queryResponseDef)
				.build();
		return allGraphQLCasesParam(objectResponse, subscriptionCallback, id, name, age, integer, date, dates, matrix,
				oneWithoutIdSubtype, listWithoutIdSubtype, parameters);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<AllFieldCases>. Its {@link SubscriptionCallback#onMessage(Object)}
	 *            will be called for each notification received from this subscription.
	 * @param id
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param name
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param age
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param integer
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param date
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param dates
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param matrix
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param oneWithoutIdSubtype
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param listWithoutIdSubtype
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient allGraphQLCasesParam(String queryResponseDef,
			SubscriptionCallback<AllFieldCases> subscriptionCallback, java.lang.String id, java.lang.String name,
			java.lang.Long age, java.lang.Integer integer, java.util.Date date, List<java.util.Date> dates,
			List<List<java.lang.Double>> matrix, AllFieldCasesWithoutIdSubtypeInput oneWithoutIdSubtype,
			List<AllFieldCasesWithoutIdSubtypeInput> listWithoutIdSubtype, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'allGraphQLCasesParam'. queryResponseDef is '{}'", queryResponseDef);
		ObjectResponse objectResponse = getAllGraphQLCasesParamResponseBuilder().withQueryResponseDef(queryResponseDef)
				.build();
		return allGraphQLCasesParamWithBindValues(objectResponse, subscriptionCallback, id, name, age, integer, date,
				dates, matrix, oneWithoutIdSubtype, listWithoutIdSubtype,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<AllFieldCases>. Its {@link SubscriptionCallback#onMessage(Object)}
	 *            will be called for each notification received from this subscription.
	 * @param id
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param name
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param age
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param integer
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param date
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param dates
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param matrix
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param oneWithoutIdSubtype
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param listWithoutIdSubtype
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient allGraphQLCasesParamWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<AllFieldCases> subscriptionCallback, java.lang.String id, java.lang.String name,
			java.lang.Long age, java.lang.Integer integer, java.util.Date date, List<java.util.Date> dates,
			List<List<java.lang.Double>> matrix, AllFieldCasesWithoutIdSubtypeInput oneWithoutIdSubtype,
			List<AllFieldCasesWithoutIdSubtypeInput> listWithoutIdSubtype, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace(
					"Executing subscription 'allGraphQLCasesParam' with parameters: {}, {}, {}, {}, {}, {}, {}, {}, {} ",
					id, name, age, integer, date, dates, matrix, oneWithoutIdSubtype, listWithoutIdSubtype);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'allGraphQLCasesParam'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamId", id);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamName", name);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamAge", age);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamInteger", integer);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamDate", date);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamDates", dates);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamMatrix", matrix);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamOneWithoutIdSubtype", oneWithoutIdSubtype);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamListWithoutIdSubtype", listWithoutIdSubtype);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, AllFieldCases.class);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<AllFieldCases>. Its {@link SubscriptionCallback#onMessage(Object)}
	 *            will be called for each notification received from this subscription.
	 * @param id
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param name
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param age
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param integer
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param date
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param dates
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param matrix
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param oneWithoutIdSubtype
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param listWithoutIdSubtype
	 *            Parameter for the allGraphQLCasesParam field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient allGraphQLCasesParam(ObjectResponse objectResponse,
			SubscriptionCallback<AllFieldCases> subscriptionCallback, java.lang.String id, java.lang.String name,
			java.lang.Long age, java.lang.Integer integer, java.util.Date date, List<java.util.Date> dates,
			List<List<java.lang.Double>> matrix, AllFieldCasesWithoutIdSubtypeInput oneWithoutIdSubtype,
			List<AllFieldCasesWithoutIdSubtypeInput> listWithoutIdSubtype, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'allGraphQLCasesParam' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'allGraphQLCasesParam' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamId", id);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamName", name);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamAge", age);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamInteger", integer);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamDate", date);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamDates", dates);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamMatrix", matrix);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamOneWithoutIdSubtype", oneWithoutIdSubtype);
		parameters.put("theSubscriptionTypeAllGraphQLCasesParamListWithoutIdSubtype", listWithoutIdSubtype);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, AllFieldCases.class);
	}

	/**
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the AllFieldCases, as expected by the
	 * allGraphQLCasesParam subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getAllGraphQLCasesParamResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class,
				"allGraphQLCasesParam", RequestType.subscription,
				InputParameter.newBindParameter("MySchema", "id", "theSubscriptionTypeAllGraphQLCasesParamId",
						InputParameterType.MANDATORY, "String", true, 0, false),
				InputParameter.newBindParameter("MySchema", "name", "theSubscriptionTypeAllGraphQLCasesParamName",
						InputParameterType.MANDATORY, "String", true, 0, false),
				InputParameter.newBindParameter("MySchema", "age", "theSubscriptionTypeAllGraphQLCasesParamAge",
						InputParameterType.MANDATORY, "Long", true, 0, false),
				InputParameter.newBindParameter("MySchema", "integer", "theSubscriptionTypeAllGraphQLCasesParamInteger",
						InputParameterType.MANDATORY, "Int", true, 0, false),
				InputParameter.newBindParameter("MySchema", "date", "theSubscriptionTypeAllGraphQLCasesParamDate",
						InputParameterType.MANDATORY, "Date", true, 0, false),
				InputParameter.newBindParameter("MySchema", "dates", "theSubscriptionTypeAllGraphQLCasesParamDates",
						InputParameterType.MANDATORY, "Date", true, 1, false),
				InputParameter.newBindParameter("MySchema", "matrix", "theSubscriptionTypeAllGraphQLCasesParamMatrix",
						InputParameterType.MANDATORY, "Float", true, 2, false),
				InputParameter.newBindParameter("MySchema", "oneWithoutIdSubtype",
						"theSubscriptionTypeAllGraphQLCasesParamOneWithoutIdSubtype", InputParameterType.MANDATORY,
						"AllFieldCasesWithoutIdSubtypeInput", true, 0, false),
				InputParameter.newBindParameter("MySchema", "listWithoutIdSubtype",
						"theSubscriptionTypeAllGraphQLCasesParamListWithoutIdSubtype", InputParameterType.MANDATORY,
						"AllFieldCasesWithoutIdSubtypeInput", true, 1, true));
	}

	/**
	 * Get the {@link GraphQLRequest} for the allGraphQLCasesParam executor, created with the given Partial request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getAllGraphQLCasesParamGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription, "allGraphQLCasesParam",
				InputParameter.newBindParameter("MySchema", "id", "theSubscriptionTypeAllGraphQLCasesParamId",
						InputParameterType.MANDATORY, "String", true, 0, false),
				InputParameter.newBindParameter("MySchema", "name", "theSubscriptionTypeAllGraphQLCasesParamName",
						InputParameterType.MANDATORY, "String", true, 0, false),
				InputParameter.newBindParameter("MySchema", "age", "theSubscriptionTypeAllGraphQLCasesParamAge",
						InputParameterType.MANDATORY, "Long", true, 0, false),
				InputParameter.newBindParameter("MySchema", "integer", "theSubscriptionTypeAllGraphQLCasesParamInteger",
						InputParameterType.MANDATORY, "Int", true, 0, false),
				InputParameter.newBindParameter("MySchema", "date", "theSubscriptionTypeAllGraphQLCasesParamDate",
						InputParameterType.MANDATORY, "Date", true, 0, false),
				InputParameter.newBindParameter("MySchema", "dates", "theSubscriptionTypeAllGraphQLCasesParamDates",
						InputParameterType.MANDATORY, "Date", true, 1, false),
				InputParameter.newBindParameter("MySchema", "matrix", "theSubscriptionTypeAllGraphQLCasesParamMatrix",
						InputParameterType.MANDATORY, "Float", true, 2, false),
				InputParameter.newBindParameter("MySchema", "oneWithoutIdSubtype",
						"theSubscriptionTypeAllGraphQLCasesParamOneWithoutIdSubtype", InputParameterType.MANDATORY,
						"AllFieldCasesWithoutIdSubtypeInput", true, 0, false),
				InputParameter.newBindParameter("MySchema", "listWithoutIdSubtype",
						"theSubscriptionTypeAllGraphQLCasesParamListWithoutIdSubtype", InputParameterType.MANDATORY,
						"AllFieldCasesWithoutIdSubtypeInput", true, 1, true));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param param
	 *            Parameter for the subscriptionTest field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscriptionTestWithBindValues(String queryResponseDef,
			SubscriptionCallback<java.lang.String> subscriptionCallback, SubscriptionTestParam param,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscriptionTest': {} ", queryResponseDef);
		ObjectResponse objectResponse = getSubscriptionTestResponseBuilder().withQueryResponseDef(queryResponseDef)
				.build();
		return subscriptionTest(objectResponse, subscriptionCallback, param, parameters);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param param
	 *            Parameter for the subscriptionTest field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscriptionTest(String queryResponseDef,
			SubscriptionCallback<java.lang.String> subscriptionCallback, SubscriptionTestParam param,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscriptionTest'. queryResponseDef is '{}'", queryResponseDef);
		ObjectResponse objectResponse = getSubscriptionTestResponseBuilder().withQueryResponseDef(queryResponseDef)
				.build();
		return subscriptionTestWithBindValues(objectResponse, subscriptionCallback, param,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param param
	 *            Parameter for the subscriptionTest field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscriptionTestWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<java.lang.String> subscriptionCallback, SubscriptionTestParam param,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'subscriptionTest' with parameters: {} ", param);
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscriptionTest'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();
		parameters.put("theSubscriptionTypeSubscriptionTestParam", param);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.lang.String.class);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param param
	 *            Parameter for the subscriptionTest field of TheSubscriptionType, as defined in the GraphQL schema
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscriptionTest(ObjectResponse objectResponse,
			SubscriptionCallback<java.lang.String> subscriptionCallback, SubscriptionTestParam param,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'subscriptionTest' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscriptionTest' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);
		parameters.put("theSubscriptionTypeSubscriptionTestParam", param);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.lang.String.class);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the String, as expected by the
	 * subscriptionTest subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getSubscriptionTestResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class,
				"subscriptionTest", RequestType.subscription,
				InputParameter.newBindParameter("MySchema", "param", "theSubscriptionTypeSubscriptionTestParam",
						InputParameterType.MANDATORY, "SubscriptionTestParam", true, 0, false));
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link GraphQLRequest} for the subscriptionTest executor, created with the given Partial request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getSubscriptionTestGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription, "subscriptionTest",
				InputParameter.newBindParameter("MySchema", "param", "theSubscriptionTypeSubscriptionTestParam",
						InputParameterType.MANDATORY, "SubscriptionTestParam", true, 0, false));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscriptionWithNullResponseWithBindValues(String queryResponseDef,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscriptionWithNullResponse': {} ", queryResponseDef);
		ObjectResponse objectResponse = getSubscriptionWithNullResponseResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return subscriptionWithNullResponse(objectResponse, subscriptionCallback, parameters);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscriptionWithNullResponse(String queryResponseDef,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'subscriptionWithNullResponse'. queryResponseDef is '{}'",
				queryResponseDef);
		ObjectResponse objectResponse = getSubscriptionWithNullResponseResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return subscriptionWithNullResponseWithBindValues(objectResponse, subscriptionCallback,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscriptionWithNullResponseWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'subscriptionWithNullResponse' with parameters: ");
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscriptionWithNullResponse'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.lang.String.class);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient subscriptionWithNullResponse(ObjectResponse objectResponse,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'subscriptionWithNullResponse' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'subscriptionWithNullResponse' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.lang.String.class);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the String, as expected by the
	 * subscriptionWithNullResponse subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getSubscriptionWithNullResponseResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class,
				"subscriptionWithNullResponse", RequestType.subscription);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link GraphQLRequest} for the subscriptionWithNullResponse executor, created with the given Partial
	 * request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getSubscriptionWithNullResponseGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription,
				"subscriptionWithNullResponse");
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<EnumWithReservedJavaKeywordAsValues>. Its
	 *            {@link SubscriptionCallback#onMessage(Object)} will be called for each notification received from this
	 *            subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient enumWithReservedJavaKeywordAsValuesWithBindValues(String queryResponseDef,
			SubscriptionCallback<EnumWithReservedJavaKeywordAsValues> subscriptionCallback,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'enumWithReservedJavaKeywordAsValues': {} ", queryResponseDef);
		ObjectResponse objectResponse = getEnumWithReservedJavaKeywordAsValuesResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return enumWithReservedJavaKeywordAsValues(objectResponse, subscriptionCallback, parameters);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<EnumWithReservedJavaKeywordAsValues>. Its
	 *            {@link SubscriptionCallback#onMessage(Object)} will be called for each notification received from this
	 *            subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient enumWithReservedJavaKeywordAsValues(String queryResponseDef,
			SubscriptionCallback<EnumWithReservedJavaKeywordAsValues> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'enumWithReservedJavaKeywordAsValues'. queryResponseDef is '{}'",
				queryResponseDef);
		ObjectResponse objectResponse = getEnumWithReservedJavaKeywordAsValuesResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return enumWithReservedJavaKeywordAsValuesWithBindValues(objectResponse, subscriptionCallback,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<EnumWithReservedJavaKeywordAsValues>. Its
	 *            {@link SubscriptionCallback#onMessage(Object)} will be called for each notification received from this
	 *            subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient enumWithReservedJavaKeywordAsValuesWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<EnumWithReservedJavaKeywordAsValues> subscriptionCallback,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'enumWithReservedJavaKeywordAsValues' with parameters: ");
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'enumWithReservedJavaKeywordAsValues'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class,
				EnumWithReservedJavaKeywordAsValues.class);
	}

	/**
	 * ${field.content} <BR/>
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<EnumWithReservedJavaKeywordAsValues>. Its
	 *            {@link SubscriptionCallback#onMessage(Object)} will be called for each notification received from this
	 *            subscription.
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient enumWithReservedJavaKeywordAsValues(ObjectResponse objectResponse,
			SubscriptionCallback<EnumWithReservedJavaKeywordAsValues> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'enumWithReservedJavaKeywordAsValues' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'enumWithReservedJavaKeywordAsValues' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class,
				EnumWithReservedJavaKeywordAsValues.class);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the EnumWithReservedJavaKeywordAsValues, as
	 * expected by the enumWithReservedJavaKeywordAsValues subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getEnumWithReservedJavaKeywordAsValuesResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class,
				"enumWithReservedJavaKeywordAsValues", RequestType.subscription);
	}

	/**
	 * ${field.content} <BR/>
	 * Get the {@link GraphQLRequest} for the enumWithReservedJavaKeywordAsValues executor, created with the given
	 * Partial request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getEnumWithReservedJavaKeywordAsValuesGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription,
				"enumWithReservedJavaKeywordAsValues");
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<EnumWithReservedJavaKeywordAsValues>. Its
	 *            {@link SubscriptionCallback#onMessage(Object)} will be called for each notification received from this
	 *            subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient listOfEnumWithReservedJavaKeywordAsValuesWithBindValues(String queryResponseDef,
			SubscriptionCallback<List<EnumWithReservedJavaKeywordAsValues>> subscriptionCallback,
			Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'listOfEnumWithReservedJavaKeywordAsValues': {} ", queryResponseDef);
		ObjectResponse objectResponse = getListOfEnumWithReservedJavaKeywordAsValuesResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return listOfEnumWithReservedJavaKeywordAsValues(objectResponse, subscriptionCallback, parameters);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<EnumWithReservedJavaKeywordAsValues>. Its
	 *            {@link SubscriptionCallback#onMessage(Object)} will be called for each notification received from this
	 *            subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient listOfEnumWithReservedJavaKeywordAsValues(String queryResponseDef,
			SubscriptionCallback<List<EnumWithReservedJavaKeywordAsValues>> subscriptionCallback,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'listOfEnumWithReservedJavaKeywordAsValues'. queryResponseDef is '{}'",
				queryResponseDef);
		ObjectResponse objectResponse = getListOfEnumWithReservedJavaKeywordAsValuesResponseBuilder()
				.withQueryResponseDef(queryResponseDef).build();
		return listOfEnumWithReservedJavaKeywordAsValuesWithBindValues(objectResponse, subscriptionCallback,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<EnumWithReservedJavaKeywordAsValues>. Its
	 *            {@link SubscriptionCallback#onMessage(Object)} will be called for each notification received from this
	 *            subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SubscriptionClient listOfEnumWithReservedJavaKeywordAsValuesWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<List<EnumWithReservedJavaKeywordAsValues>> subscriptionCallback,
			Map<String, Object> parameters) throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'listOfEnumWithReservedJavaKeywordAsValues' with parameters: ");
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'listOfEnumWithReservedJavaKeywordAsValues'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();

		// This ugly double casting is necessary to make the code compile. If anyone has a better idea... please raise
		// an issue
		return objectResponse.exec(parameters, (SubscriptionCallback<List>) (Object) subscriptionCallback,
				TheSubscriptionType.class, List.class);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<EnumWithReservedJavaKeywordAsValues>. Its
	 *            {@link SubscriptionCallback#onMessage(Object)} will be called for each notification received from this
	 *            subscription.
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public SubscriptionClient listOfEnumWithReservedJavaKeywordAsValues(ObjectResponse objectResponse,
			SubscriptionCallback<List<EnumWithReservedJavaKeywordAsValues>> subscriptionCallback,
			Object... paramsAndValues) throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'listOfEnumWithReservedJavaKeywordAsValues' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'listOfEnumWithReservedJavaKeywordAsValues' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);

		return objectResponse.exec(parameters, (SubscriptionCallback<List>) (Object) subscriptionCallback,
				TheSubscriptionType.class, List.class);
	}

	/**
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the EnumWithReservedJavaKeywordAsValues, as
	 * expected by the listOfEnumWithReservedJavaKeywordAsValues subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getListOfEnumWithReservedJavaKeywordAsValuesResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class,
				"listOfEnumWithReservedJavaKeywordAsValues", RequestType.subscription);
	}

	/**
	 * Get the {@link GraphQLRequest} for the listOfEnumWithReservedJavaKeywordAsValues executor, created with the given
	 * Partial request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getListOfEnumWithReservedJavaKeywordAsValuesGraphQLRequest(String partialRequest)
			throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription,
				"listOfEnumWithReservedJavaKeywordAsValues");
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * This method name is prefixed by ${underscore}, as if is a java reserved keyword.
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient _ifWithBindValues(String queryResponseDef,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'if': {} ", queryResponseDef);
		ObjectResponse objectResponse = getIfResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return _if(objectResponse, subscriptionCallback, parameters);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * This method name is prefixed by ${underscore}, as if is a java reserved keyword.
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient _if(String queryResponseDef, SubscriptionCallback<java.lang.String> subscriptionCallback,
			Object... paramsAndValues) throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'if'. queryResponseDef is '{}'", queryResponseDef);
		ObjectResponse objectResponse = getIfResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return _ifWithBindValues(objectResponse, subscriptionCallback,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * This method name is prefixed by ${underscore}, as if is a java reserved keyword.
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient _ifWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'if' with parameters: ");
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'if'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.lang.String.class);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * This method name is prefixed by ${underscore}, as if is a java reserved keyword.
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient _if(ObjectResponse objectResponse,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'if' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'if' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.lang.String.class);
	}

	/**
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the String, as expected by the if
	 * subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getIfResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class, "if",
				RequestType.subscription);
	}

	/**
	 * Get the {@link GraphQLRequest} for the if executor, created with the given Partial request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getIfGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription, "if");
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * This method name is prefixed by ${underscore}, as implements is a java reserved keyword.
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient _implementsWithBindValues(String queryResponseDef,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'implements': {} ", queryResponseDef);
		ObjectResponse objectResponse = getImplementsResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return _implements(objectResponse, subscriptionCallback, parameters);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * }
	 * 
	 * void exec() {
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}",
	 * 			new PostSubscriptionCallback(), "Board name 1", // The parameter(s) of the subscription if any, are
	 * 															// directly sent as parameter for this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * This method name is prefixed by ${underscore}, as implements is a java reserved keyword.
	 * 
	 * @param queryResponseDef
	 *            The response definition of the subscription, in the native GraphQL format (see here above)
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined subscription, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestPreparationException
	 *             When an error occurs during the request preparation, typically when building the
	 *             {@link ObjectResponse}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient _implements(String queryResponseDef,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {
		logger.debug("Executing subscription 'implements'. queryResponseDef is '{}'", queryResponseDef);
		ObjectResponse objectResponse = getImplementsResponseBuilder().withQueryResponseDef(queryResponseDef).build();
		return _implementsWithBindValues(objectResponse, subscriptionCallback,
				graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			params // The bind variable you defined in your query are in this map.
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * This method name is prefixed by ${underscore}, as implements is a java reserved keyword.
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param parameters
	 *            The list of values, for the bind variables defined in the subscription. If there is no bind variable
	 *            in the defined Query, this argument may be null or an empty {@link Map}
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient _implementsWithBindValues(ObjectResponse objectResponse,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Map<String, Object> parameters)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			logger.trace("Executing subscription 'implements' with parameters: ");
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'implements'");
		}

		// Given values for the BindVariables
		parameters = (parameters != null) ? parameters : new HashMap<>();

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.lang.String.class);
	}

	/**
	 * This method registers a subscription, by executing a direct partial request against the GraphQL server. This
	 * subscription is one of the fields defined in the GraphQL subscription object. The queryResponseDef contains the
	 * part of the subscription that <B><U>is after</U></B> the subscription name (see the sample below), for instance
	 * "{id name}" if you want these two fields to be sent in the notifications you'll receive for this
	 * subscription.<BR/>
	 * You must also provide a callback instance of the {@link SubscriptionCallback}, and the parameter for the
	 * subscription as parameter for this method. For instance, if the subscription subscribeToNewPost has one parameter
	 * <I>boardName</I> (as defined in the GraphQL schema):
	 * 
	 * <PRE>
	 * SubscriptionClient client;
	 * GraphQLRequest subscriptionRequest;
	 * 
	 * void setup() {
	 * 	subscriptionType = new SubscriptionType("http://localhost:8180/graphql/subscription");
	 * 	subscriptionRequest = subscriptionType.getSubscribeToNewPostGraphQLRequest(
	 * 			"{id date author publiclyAvailable title(param: ?anOptionalParam) content}");
	 * }
	 * 
	 * void exec() {
	 * 	Map<String, Object> params = new HashMap<>();
	 * 	params.put("anOptionalParam", "a param value");
	 * 	// PostSubscriptionCallback implement SubscriptionCallback<Post>, as Post is the returned type for the
	 * 	// subscribeToNewPost subscription. Its onMessage(T) method will be called for each notification of this
	 * 	// subscription.
	 * 	client = subscriptionType.subscribeToNewPost(subscriptionRequest, new PostSubscriptionCallback(),
	 * 			"Board name 1", // The parameter(s) of the subscription if any, are directly sent as parameter for
	 * 							// this method
	 * 			"anOptionalParam", "a param value" // The bind variables that you've defined in your query are given
	 * 												// as a listof couple of (name, value)
	 * 	);
	 * }
	 * 
	 * void freeResources() {
	 * 	client.unsubscribe();
	 * }
	 * </PRE>
	 * 
	 * This method name is prefixed by ${underscore}, as implements is a java reserved keyword.
	 * 
	 * @param objectResponse
	 *            The definition of the response format, that describes what the GraphQL server is expected to return
	 * @param subscriptionCallback
	 *            An instance of SubscriptionCallback<String>. Its {@link SubscriptionCallback#onMessage(Object)} will
	 *            be called for each notification received from this subscription.
	 * @param paramsAndValues
	 *            This parameter contains all the name and values for the Bind Variables defined in the objectResponse
	 *            parameter, that must be sent to the server. Optional parameter may not have a value. They will be
	 *            ignored and not sent to the server. Mandatory parameter must be provided in this argument.<BR/>
	 *            This parameter contains an even number of parameters: it must be a series of name and values :
	 *            (paramName1, paramValue1, paramName2, paramValue2...)
	 * @throws GraphQLRequestExecutionException
	 *             When an error occurs during the request execution, typically a network error, an error from the
	 *             GraphQL server or if the server response can't be parsed
	 */
	public SubscriptionClient _implements(ObjectResponse objectResponse,
			SubscriptionCallback<java.lang.String> subscriptionCallback, Object... paramsAndValues)
			throws GraphQLRequestExecutionException {
		if (logger.isTraceEnabled()) {
			StringBuffer sb = new StringBuffer();
			sb.append("Executing subscription 'implements' with bind variables: ");
			boolean addComma = false;
			for (Object o : paramsAndValues) {
				if (o != null) {
					sb.append(o.toString());
					if (addComma) {
						sb.append(", ");
					}
					addComma = true;
				}
			}
			logger.trace(sb.toString());
		} else if (logger.isDebugEnabled()) {
			logger.debug("Executing subscription 'implements' (with bind variables)");
		}

		Map<String, Object> parameters = graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues);

		return objectResponse.exec(parameters, subscriptionCallback, TheSubscriptionType.class, java.lang.String.class);
	}

	/**
	 * Get the {@link com.graphql_java_generator.client.request.Builder} for the String, as expected by the implements
	 * subscription.
	 * 
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public com.graphql_java_generator.client.request.Builder getImplementsResponseBuilder()
			throws GraphQLRequestPreparationException {
		return new com.graphql_java_generator.client.request.Builder(graphQlClient, GraphQLRequest.class, "implements",
				RequestType.subscription);
	}

	/**
	 * Get the {@link GraphQLRequest} for the implements executor, created with the given Partial request.
	 * 
	 * @param partialRequest
	 *            The Partial GraphQLRequest, as explained in the
	 *            <A HREF="https://graphql-maven-plugin-project.graphql-java-generator.com/client.html">plugin client
	 *            documentation</A>
	 * @return
	 * @throws GraphQLRequestPreparationException
	 */
	public GraphQLRequest getImplementsGraphQLRequest(String partialRequest) throws GraphQLRequestPreparationException {
		return new GraphQLRequest(graphQlClient, partialRequest, RequestType.subscription, "implements");
	}

}
