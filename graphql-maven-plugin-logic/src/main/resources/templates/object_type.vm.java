#################################################################################################################
## Import of common.vm  (commons Velocity macro and definitions)
#################################################################################################################
#parse ("templates/common.vm")
##
##
/** Generated by the '${templateName}' default template from graphql-java-generator */
package ${configuration.packageName};

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

#if(${configuration.mode}=="server")
import org.dataloader.DataLoader;

import graphql.schema.DataFetchingEnvironment;
#end

#if ($configuration.isGenerateJacksonAnnotations())
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
#end

#foreach($import in ${object.imports})
import $import;
#end

import com.graphql_java_generator.annotation.GraphQLDirective;

/**
#if ($object.description)
#foreach ($line in $object.description.lines)
 * ${line}
#end
#end
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
${object.annotation}
#if ($configuration.isGenerateJacksonAnnotations())
@JsonInclude(Include.NON_NULL)
#end
#appliedDirectives(${object.appliedDirectives}, "")
@SuppressWarnings("unused")
public class ${targetFileName}
#if($object.implementz && $object.implementz.size()>0)
	implements #foreach($impl in $object.implementedTypes)$impl.javaName#if($foreach.hasNext), #end#end
#foreach ($interface in $object.additionalInterfaces)
		, $interface
#end
#if($configuration.isGenerateJacksonAnnotations() && $configuration.mode == 'client' && ${object.requestType})
		, com.graphql_java_generator.client.GraphQLRequestObject
#end
#elseif ($object.additionalInterfaces && $object.additionalInterfaces.size() > 0)
	implements #foreach($interface in $object.additionalInterfaces)$interface#if($foreach.hasNext), #end#end 
#if($configuration.isGenerateJacksonAnnotations() && $configuration.mode == 'client' && ${object.requestType})
		, com.graphql_java_generator.client.GraphQLRequestObject
#end
#elseif($configuration.isGenerateJacksonAnnotations() && $configuration.mode == 'client' && ${object.requestType})
	implements com.graphql_java_generator.client.GraphQLRequestObject
#end
{
##
## For objects that represent the requests (query, mutation and subscription), we add the capability to decode the GraphQL extensions response field
##
#if($configuration.isGenerateJacksonAnnotations() && ${object.requestType})

	private ObjectMapper mapper = null;
	private JsonNode extensions;
	private Map<String, JsonNode> extensionsAsMap = null;
#end
#parse ("templates/object_content.vm.java")
##
## For objects that represent the requests (query, mutation and subscription), we add the capability to decode the GraphQL extensions response field
##
#if($configuration.isGenerateJacksonAnnotations() && ${object.requestType})
	private ObjectMapper getMapper() {
		if (this.mapper == null) {
			this.mapper = new ObjectMapper();
		}
		return this.mapper;
	}
	
	public JsonNode getExtensions() {
		return this.extensions;
	}
	
	public void setExtensions(JsonNode extensionsParam) {
		this.extensions = extensionsParam;
	}
	
	/**
	 * Returns the extensions as a map. The values can't be deserialized, as their type is unknown.
	 * 
	 * @return
	 */
	public Map<String, JsonNode> getExtensionsAsMap() {
		if (this.extensionsAsMap == null) {
			this.extensionsAsMap = new ObjectMapper().convertValue(this.extensions, new TypeReference<Map<String, JsonNode>>() {
				// Empty bloc
			});
		}
		return this.extensionsAsMap;
	}
	
	/**
	 * Parse the value for the given _key_, as found in the <I>extensions</I> field of the GraphQL server's response,
	 * into the given _t_ class.
	 * 
	 * @param <T>
	 * @param key
	 * @param t
	 * @return null if the key is not in the <I>extensions</I> map. Otherwise: the value for this _key_, as a _t_
	 *         instance
	 * @throws JsonProcessingException
	 *             When there is an error when converting the key's value into the _t_ class
	 */
	public <T> T getExtensionsField(String key, Class<T> t)#if($configuration.isGenerateJacksonAnnotations()) throws JsonProcessingException#end {
		JsonNode node = getExtensionsAsMap().get(key);
		return (node == null) ? null : getMapper().treeToValue(node, t);
	}
#end
}
