##
## There is an issue in the way the description is written for fields. The writing of the field's description lacks the starting tabulation
#set ($tab="	")
##
######################################################################################################################################################
##
##  The "objectFields" macro generates the list of fields for an ObjectType or for an InterfaceType
##
## parameters: 
## 1) List<FieldImpl>: the list of fields to display 
##
######
#macro(objectFields $fields)
#foreach ($field in $fields)
##
## Let's start by the field's comment (if any)
#foreach ($comment in $field.comments)
	#$comment
#end
#if ($field.description)
#if ($field.description.multiLine)
#set ($appendDoubleQuotes=true)
#foreach ($line in $field.description.lines)
$tab#if($appendDoubleQuotes)"""#end${line}
#set ($appendDoubleQuotes=false)
#end
	"""
#else
	"${field.description.content}"
#end
#end
##
## To make this template readable, the parameters are written one per line. Which means that the way the field
## is written depends on whether this field has or doesn't have input parameters
##
#if ($field.inputParameters.size() > 0)
	${field.name} (## No newline here
#foreach ($param in $field.inputParameters)
${param.name}: ${param.graphQLType}#if($param.defaultValue)=${param.getDefaultValueAsText()}#end#implementedDirective($param.appliedDirectives)#if($foreach.hasNext), #end##no newline here 
#end
): ${field.graphQLType}#implementedDirective($field.appliedDirectives)$space
#else
	${field.name}: ${field.graphQLType}#implementedDirective($field.appliedDirectives)$space
#end
#end
#end
##
######################################################################################################################################################
##
##  The "implements" macro generates the "implements interface1, interface2 ..., interface n " string
##
## parameters: 
## 1) List<String>: the list of name if interfaces or unions. The unions won't be written in the result. This is actually the ObjectType.implementz attribute. 
##
######
#macro(implements $implements)
##
## As not all items in implements will be displayed, we don't even know if there is an interface in the list. So we loop a first time
## to check if at least there is one implemented interface
#set($appendImplements=false)##
#foreach($implement in $implements)##
#if($documentParser.getType($implement).class.simpleName == "InterfaceType")##
#set($appendImplements=true)## Ok, we'll add the 'implements' keyword
#end##
#end## end of foreach
##
#set($appendSep=false)## As not all items in implements will be displayed, we can't rely on the ($foreach.hasNext) stuff
##
#foreach($implement in $implements)##
#if($appendImplements) implements #end##
#set($appendImplements=false)## We won't add it again
## the implementz field contains both the interfaces (that we want here) and the unions (that we don't want here)
#if($documentParser.getType($implement).class.simpleName == "InterfaceType")
#if($appendSep)& #end##
$implement##
#end
#set($appendSep=true)
#end
#end
######################################################################################################################################################
##
##  The "implementedDirective" macro generates the @Directive... for all the given applied directives. Or nothing if the list is empty.
##
## parameters: 
## 1) List<appliedDir>: the list of applied directives that should be written 
##
######
#macro (implementedDirective $appliedDirectives)
#foreach($appliedDirective in $appliedDirectives)

        @${appliedDirective.directive.name}##
#if($appliedDirective.argumentValues.keySet().size() > 0)(#end
#foreach($argumentName in $appliedDirective.argumentValues.keySet())##
#set ($v = $graphqlUtils.getValueAsText($appliedDirective.argumentValues.get($argumentName)))
			$argumentName: $v#if($foreach.hasNext), #end
#end
#if($appliedDirective.argumentValues.keySet().size() > 0)		)#end
#end
#end
##
######################################################################################################################################################
##
##  The "writeDescription" macro generates the given description, in a mono or multine format, or do nothing if it is null.
##
## parameters: 
## 1) description: the description to generate 
##
######
#macro (writeDescription $description)
##
#if ($description)
## Ok, the description is not null. Let's manage it
## 
#if ($description.multiLine)
#set ($appendDoubleQuotes=true)
#foreach ($line in $description.lines)
#if($appendDoubleQuotes)"""#end$line
#set ($appendDoubleQuotes=false)
#end
"""
#else
"${description.content}"
#end
##
#end
#end
###############################################################################################################
################  Scalar Extensions (of standard GraphQL scalars) #############################################
###############################################################################################################
#foreach ($scalar in $scalars)
#if ($scalar.class.name != "com.graphql_java_generator.plugin.language.impl.CustomScalarType")
## This scalar is a standard scalar type. It may have been extended with a directive
#writeDescription($scalar.description)
#if ($scalar.appliedDirectives.size() > 0)
extend scalar ${scalar.name}#implementedDirective($scalar.appliedDirectives)$space
#end
#end

#end

###############################################################################################################
################  Custom Scalars  #############################################################################
###############################################################################################################
#foreach ($customScalar in $customScalars)
#foreach ($comment in $customScalar.comments)
	#$comment
#end
#writeDescription($customScalar.description)
scalar ${customScalar.name}#implementedDirective($customScalar.appliedDirectives)$space

#end

###############################################################################################################
################  Enums           #############################################################################
###############################################################################################################
#foreach ($enum in $enumTypes)
#foreach ($comment in $enum.comments)
	#$comment
#end
#writeDescription($enum.description)
enum ${enum.name}#implementedDirective($enum.appliedDirectives) {
#foreach ($value in $enum.values)
	${value.name}#implementedDirective($value.appliedDirectives)$space
#end
}

#end

###############################################################################################################
################  Directives      #############################################################################
###############################################################################################################
#foreach ($directive in $directives)
#foreach ($comment in $directive.comments)
	#$comment
#end
#writeDescription($directive.description)
#if (! $directive.standard)
directive @${directive.name} #if ($directive.arguments.size() > 0)(
#else $space
#end
#foreach($arg in $directive.arguments)
	${arg.name}: ${arg.graphQLType} #if($arg.defaultValue)= ${arg.getDefaultValueAsText()}#end $space
#end
#if ($directive.arguments.size() > 0)
)
#end
#if($directive.repeatable)repeatable #end on #foreach($loc in $directive.directiveLocations)$loc#if($foreach.hasNext) | #end#end $space

#end
#end


###############################################################################################################
################  Schema          #############################################################################
###############################################################################################################
schema#implementedDirective($schemaDirectives) {
#if ($queryType)
	query: $queryType.name
#end
#if ($mutationType)
	mutation: $mutationType.name
#end
#if ($subscriptionType)
	subscription: $subscriptionType.name
#end
}

###############################################################################################################
################  Unions          #############################################################################
###############################################################################################################
#foreach ($union in $unionTypes)
#foreach ($comment in $union.comments)
	#$comment
#end
#writeDescription($union.description)
union ${union.name}#implementedDirective($union.appliedDirectives)$space
= #foreach ($type in $union.memberTypes)${type.name}#if($foreach.hasNext) | #end#end

#end

###############################################################################################################
################  Interfaces      #############################################################################
###############################################################################################################
#foreach ($interface in $interfaceTypes)
#foreach ($comment in $interface.comments)
	#$comment
#end
#writeDescription($interface.description)
interface ${interface.name}#implements($interface.implementz)#implementedDirective($interface.appliedDirectives) {
#objectFields($interface.fields)
}

#end

###############################################################################################################
################  Objects         #############################################################################
###############################################################################################################
#foreach ($objectType in $objectTypes)
#foreach ($comment in $objectType.comments)
	#$comment
#end
#writeDescription($objectType.description)
#if($objectType.inputType)input#{else}type#end ${objectType.name}#implements($objectType.implementz)
#implementedDirective($objectType.appliedDirectives) 
{
#objectFields($objectType.fields)
}

#end